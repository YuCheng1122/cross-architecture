Function: _Unwind_VRS_Set
Address: 0006f47c
P-code:

0006f47c: str lr,[sp,#-0x4]!
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)

0006f480: ldr lr,[0x6f4d8]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x6f4d8, 4)

0006f484: ldr r12,[sp,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006f488: add lr,pc,lr
	(unique, 0x580, 4) INT_ADD (const, 0x6f488, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x580, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

0006f48c: cmp r1,#0x5
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x5, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x24, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006f490: bhi 0x0006f4c0
	(unique, 0xc00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0xd00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0xc00, 1)
	 ---  CBRANCH (ram, 0x6f4c0, 4) , (unique, 0xd00, 1)

0006f494: ldrb r1,[lr,r1]
	(unique, 0x6200, 4) INT_ADD (register, 0x58, 4) , (register, 0x24, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)
	(register, 0x24, 4) INT_ZEXT (unique, 0x12780, 1)

0006f498: add pc,pc,r1, lsl #0x2
	(unique, 0x580, 4) INT_ADD (const, 0x6f498, 4) , (const, 0x8, 4)
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (unique, 0x2300, 4)
	(unique, 0x10280, 4) INT_ADD (unique, 0x580, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x10280, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x10280, 4) , (const, 0x0, 4)
	(register, 0x5c, 4) COPY (unique, 0x10280, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

0006f4a0: mov r0,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006f4a4: ldr pc,[sp],#0x4
	(unique, 0x6580, 4) COPY (register, 0x54, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(unique, 0x12700, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6580, 4)
	(unique, 0x0, 4) INT_AND (unique, 0x12700, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (unique, 0x12700, 4) , (const, 0xfffffffe, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

0006f4a8: cmp r2,#0xf
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xf, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0xf, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x28, 4) , (const, 0xf, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006f4ac: cmpls r3,#0x0
	(unique, 0xd80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0xe80, 1) BOOL_OR (unique, 0xd80, 1) , (register, 0x61, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0xe80, 1)
	 ---  CBRANCH (ram, 0x6f4b0, 4) , (unique, 0x1480, 1)
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006f4b0: ldreq r3,[r12,#0x0]
	(unique, 0x1480, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6f4b4, 4) , (unique, 0x1480, 1)
	(unique, 0x6000, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006f4b4: addeq r0,r0,r2, lsl #0x2
	(unique, 0x1480, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6f4b8, 4) , (unique, 0x1480, 1)
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0006f4b8: streq r3,[r0,#0x4]
	(unique, 0x1480, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6f4bc, 4) , (unique, 0x1480, 1)
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

0006f4bc: beq 0x0006f4d0
	 ---  CBRANCH (ram, 0x6f4d0, 4) , (register, 0x61, 1)

0006f4c0: mov r0,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006f4c4: ldr pc,[sp],#0x4
	(unique, 0x6580, 4) COPY (register, 0x54, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(unique, 0x12700, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6580, 4)
	(unique, 0x0, 4) INT_AND (unique, 0x12700, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (unique, 0x12700, 4) , (const, 0xfffffffe, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

0006f4c8: ldr r3,[r12,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006f4cc: str r3,[r0,#0x44]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x44, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

0006f4d0: mov r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006f4d4: ldr pc,[sp],#0x4
	(unique, 0x6580, 4) COPY (register, 0x54, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(unique, 0x12700, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6580, 4)
	(unique, 0x0, 4) INT_AND (unique, 0x12700, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (unique, 0x12700, 4) , (const, 0xfffffffe, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

