Function: __mpn_impn_mul_n
Address: 00065248
P-code:

00065248: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006524c: ands r10,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x48, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065250: mov r4,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x30, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065254: mov r5,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x34, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065258: mov r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x3c, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006525c: mov r8,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x40, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065260: sub sp,sp,#0x1c
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1c, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00065264: beq 0x000652c4
	 ---  CBRANCH (ram, 0x652c4, 4) , (register, 0x61, 1)

00065268: sub r6,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x38, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

0006526c: cmp r6,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065270: ble 0x000654e4
	(unique, 0x1300, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1400, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x1300, 1)
	 ---  CBRANCH (ram, 0x654e4, 4) , (unique, 0x1400, 1)

00065274: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065278: str r3,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

0006527c: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065280: bl 0x00065248
	(register, 0x58, 4) COPY (const, 0x65284, 4)
	 ---  CALL (ram, 0x65248, 4)

00065284: add r9,r5,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x44, 4) INT_ADD (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

00065288: mov r2,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006528c: ldr r3,[r8,r6,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x40, 4) , (unique, 0x5580, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

00065290: mov r1,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065294: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065298: bl 0x0006b730
	(register, 0x58, 4) COPY (const, 0x6529c, 4)
	 ---  CALL (ram, 0x6b730, 4)

0006529c: str r0,[r5,r6,lsl #0x3]
	(unique, 0x5580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x3, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6200, 4) , (register, 0x20, 4)

000652a0: ldr r3,[r7,r6,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x3c, 4) , (unique, 0x5580, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

000652a4: mov r1,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652a8: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652ac: mov r2,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652b0: bl 0x0006b730
	(register, 0x58, 4) COPY (const, 0x652b4, 4)
	 ---  CALL (ram, 0x6b730, 4)

000652b4: add r6,r4,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x38, 4) INT_ADD (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

000652b8: str r0,[r5,r6,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6200, 4) , (register, 0x20, 4)

000652bc: add sp,sp,#0x1c
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

000652c0: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

000652c4: mov r6,r3, asr #0x1
	(unique, 0x2b80, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
	(unique, 0x2c00, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2b80, 4)
	(unique, 0x2d00, 4) INT_AND (unique, 0x2c00, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2d00, 4) , (const, 0x0, 4)
	(unique, 0x2e80, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x38, 4) COPY (unique, 0x2e80, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652c8: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652cc: str r3,[sp,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

000652d0: add r0,r0,r4, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000652d4: mov r3,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652d8: cmp r6,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000652dc: str r0,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

000652e0: str r3,[sp,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

000652e4: add r9,r1,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (unique, 0x2300, 4)
	(register, 0x44, 4) INT_ADD (register, 0x24, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

000652e8: add r11,r2,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x2300, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x28, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

000652ec: ble 0x000654d0
	(unique, 0x1300, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1400, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x1300, 1)
	 ---  CBRANCH (ram, 0x654d0, 4) , (unique, 0x1400, 1)

000652f0: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000652f4: mov r2,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000652f8: str r3,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

000652fc: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065300: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065304: ldr r0,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065308: bl 0x00065248
	(register, 0x58, 4) COPY (const, 0x6530c, 4)
	 ---  CALL (ram, 0x65248, 4)

0006530c: mov r2,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065310: mov r1,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065314: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065318: bl 0x00064680
	(register, 0x58, 4) COPY (const, 0x6531c, 4)
	 ---  CALL (ram, 0x64680, 4)

0006531c: cmp r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065320: blt 0x000655c4
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	 ---  CBRANCH (ram, 0x655c4, 4) , (unique, 0x1080, 1)

00065324: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065328: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006532c: mov r2,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065330: mov r0,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065334: bl 0x00065af0
	(register, 0x58, 4) COPY (const, 0x65338, 4)
	 ---  CALL (ram, 0x65af0, 4)

00065338: mov r2,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006533c: mov r1,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065340: mov r0,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065344: bl 0x00064680
	(register, 0x58, 4) COPY (const, 0x65348, 4)
	 ---  CALL (ram, 0x64680, 4)

00065348: mov r3,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006534c: cmp r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065350: add r9,r5,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x44, 4) INT_ADD (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

00065354: blt 0x000655ac
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	 ---  CBRANCH (ram, 0x655ac, 4) , (unique, 0x1080, 1)

00065358: mov r1,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006535c: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065360: mov r2,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065364: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065368: bl 0x00065af0
	(register, 0x58, 4) COPY (const, 0x6536c, 4)
	 ---  CALL (ram, 0x65af0, 4)

0006536c: eor r10,r10,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x48, 4) INT_XOR (register, 0x48, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

00065370: cmp r6,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065374: bgt 0x00065584
	(unique, 0x1100, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1280, 1) BOOL_AND (unique, 0x1100, 1) , (unique, 0x1180, 1)
	 ---  CBRANCH (ram, 0x65584, 4) , (unique, 0x1280, 1)

00065378: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006537c: mov r2,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065380: mov r1,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065384: ldr r0,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065388: bl 0x0006515c
	(register, 0x58, 4) COPY (const, 0x6538c, 4)
	 ---  CALL (ram, 0x6515c, 4)

0006538c: cmp r6,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065390: ble 0x000653c4
	(unique, 0x1300, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1400, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x1300, 1)
	 ---  CBRANCH (ram, 0x653c4, 4) , (unique, 0x1400, 1)

00065394: mov r3,r4, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065398: sub r2,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x28, 4) INT_SUB (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006539c: mov r3,r6, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653a0: sub r3,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000653a4: sub r0,r5,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x20, 4) INT_SUB (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000653a8: add r2,r5,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000653ac: add r3,r5,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000653b0: add r0,r0,r6, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x38, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000653b4: ldr r1,[r2,#0x4]!
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x28, 4)

000653b8: str r1,[r3,#0x4]!
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x2c, 4) , (register, 0x24, 4)

000653bc: cmp r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x20, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000653c0: bne 0x000653b4
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x653b4, 4) , (unique, 0x880, 1)

000653c4: ldr r1,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000653c8: add r11,r4,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

000653cc: add r3,r5,r11, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000653d0: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653d4: str r3,[sp,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

000653d8: mov r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653dc: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653e0: bl 0x0006b6b0
	(register, 0x58, 4) COPY (const, 0x653e4, 4)
	 ---  CALL (ram, 0x6b6b0, 4)

000653e4: cmp r10,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000653e8: mov r10,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x48, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653ec: beq 0x00065568
	 ---  CBRANCH (ram, 0x65568, 4) , (register, 0x61, 1)

000653f0: mov r3,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653f4: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653f8: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000653fc: ldr r2,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065400: bl 0x00065af0
	(register, 0x58, 4) COPY (const, 0x65404, 4)
	 ---  CALL (ram, 0x65af0, 4)

00065404: sub r10,r10,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x48, 4) INT_SUB (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

00065408: cmp r6,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006540c: mov r2,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065410: mov r1,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065414: bgt 0x000654f0
	(unique, 0x1100, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1280, 1) BOOL_AND (unique, 0x1100, 1) , (unique, 0x1180, 1)
	 ---  CBRANCH (ram, 0x654f0, 4) , (unique, 0x1280, 1)

00065418: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006541c: ldr r0,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065420: bl 0x0006515c
	(register, 0x58, 4) COPY (const, 0x65424, 4)
	 ---  CALL (ram, 0x6515c, 4)

00065424: mov r3,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065428: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006542c: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065430: ldr r2,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065434: bl 0x0006b6b0
	(register, 0x58, 4) COPY (const, 0x65438, 4)
	 ---  CALL (ram, 0x6b6b0, 4)

00065438: adds r10,r10,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006543c: bne 0x000655e0
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x655e0, 4) , (unique, 0x880, 1)

00065440: cmp r6,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065444: ble 0x0006546c
	(unique, 0x1300, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1400, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x1300, 1)
	 ---  CBRANCH (ram, 0x6546c, 4) , (unique, 0x1400, 1)

00065448: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006544c: ldr r1,[sp,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065450: sub r3,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00065454: sub r2,r5,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x28, 4) INT_SUB (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00065458: add r0,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x20, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0006545c: ldr r1,[r3,#0x4]!
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x2c, 4)

00065460: cmp r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x20, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065464: str r1,[r2,#0x4]!
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x28, 4) , (register, 0x24, 4)

00065468: bne 0x0006545c
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6545c, 4) , (unique, 0x880, 1)

0006546c: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065470: ldr r2,[sp,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065474: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065478: add r2,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006547c: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065480: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065484: bl 0x0006b6b0
	(register, 0x58, 4) COPY (const, 0x65488, 4)
	 ---  CALL (ram, 0x6b6b0, 4)

00065488: cmp r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006548c: beq 0x000652bc
	 ---  CBRANCH (ram, 0x652bc, 4) , (register, 0x61, 1)

00065490: ldr r2,[sp,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065494: ldr r3,[r5,r2]
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

00065498: adds r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006549c: str r3,[r5,r2]
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (register, 0x28, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6200, 4) , (register, 0x2c, 4)

000654a0: bcc 0x000652bc
	(unique, 0x980, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x652bc, 4) , (unique, 0x980, 1)

000654a4: ldr r3,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000654a8: add r3,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000654ac: b 0x000654c4
	 ---  BRANCH (ram, 0x654c4, 4)

000654b0: ldr r2,[r3],#0x4
	(unique, 0x6580, 4) COPY (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6580, 4)

000654b4: add r2,r2,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000654b8: cmp r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000654bc: str r2,[r3,#-0x4]
	(unique, 0x6100, 4) INT_ADD (register, 0x2c, 4) , (const, 0xfffffffc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

000654c0: bne 0x000652bc
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x652bc, 4) , (unique, 0x880, 1)

000654c4: subs r4,r4,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x1, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000654c8: bne 0x000654b0
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x654b0, 4) , (unique, 0x880, 1)

000654cc: b 0x000652bc
	 ---  BRANCH (ram, 0x652bc, 4)

000654d0: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000654d4: mov r2,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000654d8: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000654dc: bl 0x0006515c
	(register, 0x58, 4) COPY (const, 0x654e0, 4)
	 ---  CALL (ram, 0x6515c, 4)

000654e0: b 0x0006530c
	 ---  BRANCH (ram, 0x6530c, 4)

000654e4: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000654e8: bl 0x0006515c
	(register, 0x58, 4) COPY (const, 0x654ec, 4)
	 ---  CALL (ram, 0x6515c, 4)

000654ec: b 0x00065284
	 ---  BRANCH (ram, 0x65284, 4)

000654f0: ldr r0,[sp,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000654f4: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000654f8: add r3,r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000654fc: str r3,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00065500: ldr r0,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065504: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065508: bl 0x00065248
	(register, 0x58, 4) COPY (const, 0x6550c, 4)
	 ---  CALL (ram, 0x65248, 4)

0006550c: mov r3,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065510: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065514: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065518: ldr r2,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006551c: bl 0x0006b6b0
	(register, 0x58, 4) COPY (const, 0x65520, 4)
	 ---  CALL (ram, 0x6b6b0, 4)

00065520: adds r0,r0,r10
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x48, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x48, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065524: beq 0x00065448
	 ---  CBRANCH (ram, 0x65448, 4) , (register, 0x61, 1)

00065528: ldr r3,[r5,r11,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

0006552c: adds r0,r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065530: str r0,[r5,r11,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6200, 4) , (register, 0x20, 4)

00065534: bcc 0x00065448
	(unique, 0x980, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x65448, 4) , (unique, 0x980, 1)

00065538: ldr r3,[sp,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006553c: mov r1,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065540: add r2,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00065544: b 0x0006555c
	 ---  BRANCH (ram, 0x6555c, 4)

00065548: ldr r3,[r2],#0x4
	(unique, 0x6580, 4) COPY (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6580, 4)

0006554c: add r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00065550: cmp r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065554: str r3,[r2,#-0x4]
	(unique, 0x6100, 4) INT_ADD (register, 0x28, 4) , (const, 0xfffffffc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00065558: bne 0x00065440
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x65440, 4) , (unique, 0x880, 1)

0006555c: subs r1,r1,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065560: bne 0x00065548
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x65548, 4) , (unique, 0x880, 1)

00065564: b 0x00065440
	 ---  BRANCH (ram, 0x65440, 4)

00065568: mov r3,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006556c: mov r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065570: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065574: ldr r2,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065578: bl 0x0006b6b0
	(register, 0x58, 4) COPY (const, 0x6557c, 4)
	 ---  CALL (ram, 0x6b6b0, 4)

0006557c: add r10,r10,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

00065580: b 0x00065408
	 ---  BRANCH (ram, 0x65408, 4)

00065584: ldr r3,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00065588: mov r2,r4, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x28, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006558c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00065590: str r3,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00065594: mov r2,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00065598: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006559c: mov r1,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655a0: ldr r0,[sp,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

000655a4: bl 0x00065248
	(register, 0x58, 4) COPY (const, 0x655a8, 4)
	 ---  CALL (ram, 0x65248, 4)

000655a8: b 0x00065394
	 ---  BRANCH (ram, 0x65394, 4)

000655ac: mov r2,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655b0: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655b4: mov r1,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655b8: mov r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655bc: bl 0x00065af0
	(register, 0x58, 4) COPY (const, 0x655c0, 4)
	 ---  CALL (ram, 0x65af0, 4)

000655c0: b 0x00065370
	 ---  BRANCH (ram, 0x65370, 4)

000655c4: mov r2,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655c8: mov r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655cc: mov r1,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655d0: mov r0,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655d4: bl 0x00065af0
	(register, 0x58, 4) COPY (const, 0x655d8, 4)
	 ---  CALL (ram, 0x65af0, 4)

000655d8: mov r10,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x48, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000655dc: b 0x00065338
	 ---  BRANCH (ram, 0x65338, 4)

000655e0: ldr r3,[r5,r11,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

000655e4: adds r10,r10,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000655e8: str r10,[r5,r11,lsl #0x2]
	(unique, 0x5580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6200, 4) , (register, 0x48, 4)

000655ec: bcc 0x00065440
	(unique, 0x980, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x65440, 4) , (unique, 0x980, 1)

000655f0: b 0x00065538
	 ---  BRANCH (ram, 0x65538, 4)

