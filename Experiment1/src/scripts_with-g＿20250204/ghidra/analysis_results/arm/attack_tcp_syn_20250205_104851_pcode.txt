Function: attack_tcp_syn
Address: 00016c98
P-code:

00016c98: stmdb sp!,{r4,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00016c9c: add r11,sp,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

00016ca0: sub sp,sp,#0x64
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x64, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x64, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00016ca4: str r1,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x24, 4)

00016ca8: str r3,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016cac: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cb0: strb r3,[r11,#-0x55]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffab, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016cb4: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cb8: strb r3,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016cbc: ldrb r3,[r11,#-0x55]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffab, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00016cc0: mov r1,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cc4: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cc8: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x16ccc, 4)
	 ---  CALL (ram, 0x26a60, 4)

00016ccc: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cd0: str r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016cd4: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016cd8: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cdc: mov r2,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ce0: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016ce4: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16ce8, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016ce8: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cec: strb r3,[r11,#-0x11]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffef, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016cf0: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016cf4: ldr r3,[0x175d4]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00016cf8: mov r2,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016cfc: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d00: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d04, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d04: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d08: strh r3,[r11,#-0x14]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00016d0c: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d10: mov r3,#0x40
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d14: mov r2,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d18: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d1c: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d20, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d20: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d24: strb r3,[r11,#-0x15]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffeb, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016d28: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d2c: mov r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d30: mov r2,#0x5
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d34: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d38: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d3c, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d3c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d40: strb r3,[r11,#-0x16]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffea, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016d44: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d48: ldr r3,[0x175d4]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00016d4c: mov r2,#0x6
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d50: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d54: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d58, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d58: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d5c: strh r3,[r11,#-0x18]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00016d60: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d64: ldr r3,[0x175d4]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00016d68: mov r2,#0x7
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x7, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d6c: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d70: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d74, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d74: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d78: strh r3,[r11,#-0x1a]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00016d7c: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d80: ldr r3,[0x175d4]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00016d84: mov r2,#0x11
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x11, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x11, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d88: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016d8c: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16d90, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016d90: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016d94: str r3,[r11,#-0x20]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016d98: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016d9c: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016da0: mov r2,#0x12
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x12, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x12, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016da4: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016da8: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16dac, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016dac: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016db0: str r3,[r11,#-0x24]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016db4: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016db8: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016dbc: mov r2,#0xb
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xb, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xb, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016dc0: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016dc4: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16dc8, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016dc8: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016dcc: strb r3,[r11,#-0x25]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdb, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016dd0: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016dd4: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016dd8: mov r2,#0xc
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ddc: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016de0: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16de4, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016de4: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016de8: strb r3,[r11,#-0x26]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffda, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016dec: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016df0: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016df4: mov r2,#0xd
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xd, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xd, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016df8: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016dfc: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16e00, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016e00: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e04: strb r3,[r11,#-0x27]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd9, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016e08: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016e0c: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e10: mov r2,#0xe
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xe, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xe, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e14: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016e18: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16e1c, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016e1c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e20: strb r3,[r11,#-0x28]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016e24: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016e28: mov r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e2c: mov r2,#0xf
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xf, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e30: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016e34: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16e38, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016e38: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e3c: strb r3,[r11,#-0x29]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd7, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016e40: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016e44: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e48: mov r2,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e4c: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016e50: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x16e54, 4)
	 ---  CALL (ram, 0x16a74, 4)

00016e54: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e58: strb r3,[r11,#-0x2a]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd6, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00016e5c: ldr r3,[0x175d8]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d8, 4)

00016e60: ldr r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00016e64: ldrb r0,[r11,#-0x56]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffaa, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00016e68: mov r2,#0x19
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x19, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x19, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e6c: ldr r1,[r11,#-0x60]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016e70: bl 0x00016ae0
	(register, 0x58, 4) COPY (const, 0x16e74, 4)
	 ---  CALL (ram, 0x16ae0, 4)

00016e74: str r0,[r11,#-0x30]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x20, 4)

00016e78: mov r2,#0x6
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e7c: mov r1,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e80: mov r0,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e84: bl 0x0002bbc0
	(register, 0x58, 4) COPY (const, 0x16e88, 4)
	 ---  CALL (ram, 0x2bbc0, 4)

00016e88: str r0,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x20, 4)

00016e8c: ldr r3,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016e90: cmn r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x11400, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00016e94: beq 0x000175c8
	 ---  CBRANCH (ram, 0x175c8, 4) , (register, 0x61, 1)

00016e98: mov r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016e9c: str r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016ea0: sub r3,r11,#0x50
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x50, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x50, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x50, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x4c, 4) , (const, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016ea4: mov r2,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ea8: str r2,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00016eac: mov r2,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016eb0: mov r1,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016eb4: ldr r0,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016eb8: bl 0x0002bb70
	(register, 0x58, 4) COPY (const, 0x16ebc, 4)
	 ---  CALL (ram, 0x2bb70, 4)

00016ebc: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ec0: cmn r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x11400, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00016ec4: bne 0x00016ed4
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x16ed4, 4) , (unique, 0x880, 1)

00016ec8: ldr r0,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016ecc: bl 0x0002991c
	(register, 0x58, 4) COPY (const, 0x16ed0, 4)
	 ---  CALL (ram, 0x2991c, 4)

00016ed0: b 0x000175cc
	 ---  BRANCH (ram, 0x175cc, 4)

00016ed4: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ed8: str r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016edc: b 0x000172dc
	 ---  BRANCH (ram, 0x172dc, 4)

00016ee0: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016ee4: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ee8: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016eec: add r4,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x30, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00016ef0: mov r1,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ef4: mov r0,#0x80
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x80, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x80, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ef8: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x16efc, 4)
	 ---  CALL (ram, 0x26a60, 4)

00016efc: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f00: str r3,[r4,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00016f04: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f08: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f0c: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f10: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f14: ldr r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00016f18: str r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016f1c: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f20: add r3,r3,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f24: str r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016f28: ldr r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f2c: add r3,r3,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f30: str r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00016f34: ldr r2,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f38: ldrb r3,[r2,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00016f3c: bic r3,r3,#0xb0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xb0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0xb0, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f40: orr r3,r3,#0x40
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x40, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f44: strb r3,[r2,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00016f48: ldr r2,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f4c: ldrb r3,[r2,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00016f50: bic r3,r3,#0xa
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0xa, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f54: orr r3,r3,#0x5
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x5, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016f58: strb r3,[r2,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00016f5c: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f60: ldrb r2,[r11,#-0x11]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffef, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

00016f64: strb r2,[r3,#0x1]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00016f68: mov r0,#0x3c
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3c, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f6c: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x16f70, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00016f70: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f74: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f78: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f7c: strh r2,[r3,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00016f80: ldrh r3,[r11,#-0x14]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00016f84: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f88: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x16f8c, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00016f8c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f90: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016f94: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016f98: strh r2,[r3,#0x4]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00016f9c: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fa0: ldrb r2,[r11,#-0x15]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffeb, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

00016fa4: strb r2,[r3,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00016fa8: ldrb r3,[r11,#-0x16]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffea, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00016fac: cmp r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00016fb0: beq 0x00016fcc
	 ---  CBRANCH (ram, 0x16fcc, 4) , (register, 0x61, 1)

00016fb4: mov r0,#0x4000
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016fb8: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x16fbc, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00016fbc: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016fc0: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016fc4: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fc8: strh r2,[r3,#0x6]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00016fcc: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fd0: mov r2,#0x6
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016fd4: strb r2,[r3,#0x9]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x9, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00016fd8: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fdc: ldr r2,[r11,#-0x30]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fe0: str r2,[r3,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00016fe4: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00016fe8: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016fec: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ff0: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ff4: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00016ff8: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00016ffc: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017000: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017004: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017008: ldr r2,[r3,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0001700c: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017010: str r2,[r3,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00017014: ldrh r3,[r11,#-0x18]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00017018: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001701c: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x17020, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00017020: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017024: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017028: ldr r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001702c: strh r2,[r3,#0x0]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017030: ldrh r3,[r11,#-0x1a]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00017034: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017038: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x1703c, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

0001703c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017040: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017044: ldr r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017048: strh r2,[r3,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

0001704c: ldr r3,[r11,#-0x20]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017050: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017054: mov r3,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017058: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001705c: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x17060, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00017060: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017064: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017068: ldr r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001706c: str r2,[r3,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00017070: ldr r2,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017074: ldrb r3,[r2,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0xc, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00017078: bic r3,r3,#0x50
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x50, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x50, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001707c: orr r3,r3,#0xa0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xa0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0xa0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017080: strb r3,[r2,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0xc, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017084: ldrb r3,[r11,#-0x25]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdb, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00017088: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001708c: and r3,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017090: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017094: ldrb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

00017098: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001709c: bic r2,r2,#0x20
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x20, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000170a0: mov r3,r3, lsl #0x5
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x5, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x5, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000170a4: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170a8: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000170ac: strb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000170b0: ldrb r3,[r11,#-0x26]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffda, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

000170b4: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170b8: and r3,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170bc: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000170c0: ldrb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

000170c4: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170c8: bic r2,r2,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x10, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000170cc: mov r3,r3, lsl #0x4
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000170d0: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170d4: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000170d8: strb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000170dc: ldrb r3,[r11,#-0x27]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd9, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

000170e0: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170e4: and r3,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170e8: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000170ec: ldrb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

000170f0: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000170f4: bic r2,r2,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x8, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000170f8: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000170fc: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017100: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017104: strb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017108: ldrb r3,[r11,#-0x28]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

0001710c: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017110: and r3,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017114: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017118: ldrb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

0001711c: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017120: bic r2,r2,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x4, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017124: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017128: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001712c: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017130: strb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017134: ldrb r3,[r11,#-0x29]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd7, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00017138: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001713c: and r3,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017140: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017144: ldrb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

00017148: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001714c: bic r2,r2,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x2, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017150: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017154: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017158: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001715c: strb r2,[r1,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x24, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017160: ldrb r3,[r11,#-0x2a]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd6, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00017164: and r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017168: and r1,r3,#0xff
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0001716c: ldr r2,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017170: ldrb r3,[r2,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0xd, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00017174: and r1,r1,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) INT_AND (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00017178: bic r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x1, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001717c: orr r3,r1,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x24, 4) , (register, 0x2c, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017180: strb r3,[r2,#0xd]
	(unique, 0x6000, 4) INT_ADD (register, 0x28, 4) , (const, 0xd, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017184: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017188: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0001718c: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

00017190: mov r2,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017194: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017198: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001719c: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000171a0: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

000171a4: mov r2,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171a8: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000171ac: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x171b0, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000171b0: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171b4: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171b8: mov r3,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171bc: and r3,r3,#0xf
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0xf, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000171c0: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171c4: mov r3,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171c8: add r3,r3,#0x570
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x570, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0xe, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0xe, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x570, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x570, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x570, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000171cc: add r3,r3,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000171d0: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171d4: mov r3,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171d8: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171dc: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x171e0, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

000171e0: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171e4: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000171e8: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000171ec: strh r2,[r3,#0x0]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

000171f0: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000171f4: add r3,r3,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000171f8: str r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

000171fc: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017200: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017204: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

00017208: mov r2,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001720c: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017210: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017214: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017218: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

0001721c: mov r2,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017220: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017224: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017228: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0001722c: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

00017230: mov r2,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017234: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017238: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001723c: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017240: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

00017244: mov r2,#0xa
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017248: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

0001724c: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x17250, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00017250: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017254: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017258: str r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

0001725c: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017260: add r3,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017264: str r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00017268: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001726c: mov r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017270: str r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00017274: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017278: add r3,r3,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001727c: str r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00017280: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017284: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00017288: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

0001728c: mov r2,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017290: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

00017294: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017298: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0001729c: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

000172a0: mov r2,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000172a4: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000172a8: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000172ac: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000172b0: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

000172b4: mov r2,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000172b8: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000172bc: ldr r3,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000172c0: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000172c4: str r2,[r11,#-0x4c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

000172c8: mov r2,#0x6
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000172cc: strb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (unique, 0x1d300, 1)

000172d0: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000172d4: add r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000172d8: str r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

000172dc: ldrb r2,[r11,#-0x55]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffab, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

000172e0: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000172e4: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000172e8: bgt 0x00016ee0
	(unique, 0x1100, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1280, 1) BOOL_AND (unique, 0x1100, 1) , (unique, 0x1180, 1)
	 ---  CBRANCH (ram, 0x16ee0, 4) , (unique, 0x1280, 1)

000172ec: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000172f0: str r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

000172f4: b 0x000175b4
	 ---  BRANCH (ram, 0x175b4, 4)

000172f8: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000172fc: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017300: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017304: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017308: ldr r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0001730c: str r3,[r11,#-0x38]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00017310: ldr r3,[r11,#-0x38]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017314: str r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00017318: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001731c: add r3,r3,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017320: str r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00017324: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017328: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001732c: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017330: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017334: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017338: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001733c: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017340: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017344: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017348: ldrb r3,[r3,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

0001734c: cmp r3,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00017350: bhi 0x000173d4
	(unique, 0xc00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0xd00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0xc00, 1)
	 ---  CBRANCH (ram, 0x173d4, 4) , (unique, 0xd00, 1)

00017354: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017358: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001735c: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017360: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017364: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017368: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001736c: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017370: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017374: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017378: ldr r3,[r3,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0001737c: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017380: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x17384, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

00017384: mov r4,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x30, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017388: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1738c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001738c: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017390: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017394: mov r1,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017398: mov r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001739c: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173a0: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000173a4: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173a8: mov r1,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173ac: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000173b0: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000173b4: ldrb r3,[r3,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

000173b8: mov r3,r2, lsr r3
	(unique, 0x3f00, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(unique, 0x3f80, 4) INT_SUB (unique, 0x3f00, 4) , (const, 0x1, 4)
	(unique, 0x4000, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3f80, 4)
	(unique, 0x4100, 4) INT_AND (unique, 0x4000, 4) , (const, 0x1, 4)
	(unique, 0x4180, 1) INT_EQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4200, 1) BOOL_AND (unique, 0x4180, 1) , (register, 0x62, 1)
	(unique, 0x4280, 1) INT_NOTEQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4300, 1) SUBPIECE (unique, 0x4100, 4) , (const, 0x0, 4)
	(unique, 0x4380, 1) BOOL_AND (unique, 0x4280, 1) , (unique, 0x4300, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4200, 1) , (unique, 0x4380, 1)
	(unique, 0x4500, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3f00, 4)
	(register, 0x2c, 4) COPY (unique, 0x4500, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173bc: add r3,r4,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000173c0: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173c4: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x173c8, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

000173c8: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173cc: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000173d0: str r2,[r3,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

000173d4: ldr r3,[r11,#-0x30]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000173d8: cmn r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x11400, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000173dc: bne 0x000173f0
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x173f0, 4) , (unique, 0x880, 1)

000173e0: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x173e4, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000173e4: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000173e8: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000173ec: str r2,[r3,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

000173f0: ldrh r3,[r11,#-0x14]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

000173f4: ldr r2,[0x175d4]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

000173f8: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000173fc: bne 0x00017418
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x17418, 4) , (unique, 0x880, 1)

00017400: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x17404, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00017404: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017408: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001740c: mov r2,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017410: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017414: strh r2,[r3,#0x4]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017418: ldrh r3,[r11,#-0x18]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

0001741c: ldr r2,[0x175d4]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00017420: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00017424: bne 0x00017440
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x17440, 4) , (unique, 0x880, 1)

00017428: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1742c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001742c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017430: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017434: mov r2,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017438: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001743c: strh r2,[r3,#0x0]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017440: ldrh r3,[r11,#-0x1a]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00017444: ldr r2,[0x175d4]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00017448: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001744c: bne 0x00017468
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x17468, 4) , (unique, 0x880, 1)

00017450: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x17454, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00017454: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017458: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001745c: mov r2,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017460: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017464: strh r2,[r3,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017468: ldr r3,[r11,#-0x20]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001746c: ldr r2,[0x175d4]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00017470: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00017474: bne 0x00017488
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x17488, 4) , (unique, 0x880, 1)

00017478: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1747c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001747c: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017480: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017484: str r2,[r3,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00017488: ldr r3,[r11,#-0x24]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001748c: ldr r2,[0x175d4]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x175d4, 4)

00017490: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00017494: bne 0x000174a8
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x174a8, 4) , (unique, 0x880, 1)

00017498: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1749c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001749c: mov r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174a0: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174a4: str r2,[r3,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

000174a8: ldrb r3,[r11,#-0x25]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdb, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

000174ac: cmp r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000174b0: beq 0x000174cc
	 ---  CBRANCH (ram, 0x174cc, 4) , (register, 0x61, 1)

000174b4: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x174b8, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000174b8: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174bc: mov r3,r3, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174c0: mov r2,r3, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174c4: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174c8: strh r2,[r3,#0x12]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x12, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

000174cc: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174d0: mov r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174d4: strh r2,[r3,#0xa]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

000174d8: mov r1,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174dc: ldr r0,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174e0: bl 0x0001a314
	(register, 0x58, 4) COPY (const, 0x174e4, 4)
	 ---  CALL (ram, 0x1a314, 4)

000174e4: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174e8: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174ec: ldr r3,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174f0: strh r2,[r3,#0xa]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

000174f4: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000174f8: mov r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000174fc: strh r2,[r3,#0x10]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017500: mov r0,#0x28
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x28, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017504: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x17508, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00017508: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001750c: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017510: mov r3,#0x28
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x28, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017514: ldr r1,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017518: ldr r0,[r11,#-0x3c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001751c: bl 0x0001a3b4
	(register, 0x58, 4) COPY (const, 0x17520, 4)
	 ---  CALL (ram, 0x1a3b4, 4)

00017520: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017524: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017528: ldr r3,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001752c: strh r2,[r3,#0x10]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017530: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017534: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017538: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001753c: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017540: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017544: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017548: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001754c: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017550: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017554: ldr r2,[r11,#-0x40]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017558: ldrh r2,[r2,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x28, 4) , (const, 0x2, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x6f00, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12b00, 2)

0001755c: strh r2,[r3,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00017560: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017564: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017568: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001756c: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017570: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017574: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017578: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001757c: ldr r3,[r11,#-0x5c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00017580: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00017584: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017588: mov r3,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001758c: str r3,[sp,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00017590: str r2,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00017594: mov r3,#0x4000
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00017598: mov r2,#0x3c
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3c, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001759c: ldr r1,[r11,#-0x38]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000175a0: ldr r0,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000175a4: bl 0x0002ba8c
	(register, 0x58, 4) COPY (const, 0x175a8, 4)
	 ---  CALL (ram, 0x2ba8c, 4)

000175a8: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000175ac: add r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000175b0: str r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

000175b4: ldrb r2,[r11,#-0x55]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffab, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

000175b8: ldr r3,[r11,#-0x50]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

000175bc: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000175c0: bgt 0x000172f8
	(unique, 0x1100, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1280, 1) BOOL_AND (unique, 0x1100, 1) , (unique, 0x1180, 1)
	 ---  CBRANCH (ram, 0x172f8, 4) , (unique, 0x1280, 1)

000175c4: b 0x000172ec
	 ---  BRANCH (ram, 0x172ec, 4)

000175c8: mov r0,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000175cc: sub sp,r11,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x54, 4) INT_SUB (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

000175d0: ldmia sp!,{r4,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

