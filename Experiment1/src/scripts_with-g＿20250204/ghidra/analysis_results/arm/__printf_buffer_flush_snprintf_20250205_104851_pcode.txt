Function: __printf_buffer_flush_snprintf
Address: 0005eaec
P-code:

0005eaec: ldr r12,[r0,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0005eaf0: ldr r2,[r0,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0005eaf4: ldr r3,[r0,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0005eaf8: sub r2,r2,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x28, 4) INT_SUB (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0005eafc: ldr r1,[r0,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x14, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0005eb00: adds r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005eb04: adc r1,r1,r2, asr #0x1f
	(unique, 0x2b80, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
	(unique, 0x2c00, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x2b80, 4)
	(unique, 0x2d00, 4) INT_AND (unique, 0x2c00, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2d00, 4) , (const, 0x0, 4)
	(unique, 0x2e80, 4) INT_SRIGHT (register, 0x28, 4) , (const, 0x1f, 4)
	(unique, 0xe980, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0xea80, 4) INT_ADD (register, 0x24, 4) , (unique, 0x2e80, 4)
	(unique, 0xeb00, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x2e80, 4)
	(unique, 0xeb80, 1) INT_CARRY (unique, 0xea80, 4) , (unique, 0xe980, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0xeb00, 1) , (unique, 0xeb80, 1)
	(unique, 0xec80, 1) INT_SCARRY (register, 0x24, 4) , (unique, 0x2e80, 4)
	(unique, 0xed00, 1) INT_SCARRY (unique, 0xea80, 4) , (unique, 0xe980, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0xec80, 1) , (unique, 0xed00, 1)
	(unique, 0xf500, 4) INT_ADD (register, 0x24, 4) , (unique, 0x2e80, 4)
	(unique, 0xf580, 4) INT_ZEXT (register, 0x62, 1)
	(register, 0x24, 4) INT_ADD (unique, 0xf500, 4) , (unique, 0xf580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0005eb08: add r2,r0,#0x20
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x20, 4)
	(register, 0x28, 4) INT_ADD (register, 0x20, 4) , (const, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0005eb0c: cmp r12,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x50, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005eb10: str r3,[r0,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

0005eb14: str r1,[r0,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x24, 4)

0005eb18: beq 0x0005eb34
	 ---  CBRANCH (ram, 0x5eb34, 4) , (register, 0x61, 1)

0005eb1c: ldr r3,[r0,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0005eb20: cmp r12,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x50, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005eb24: movne r1,#0x0
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0x880, 1)
	 ---  CBRANCH (ram, 0x5eb28, 4) , (unique, 0x1480, 1)
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005eb28: strbne r1,[r3,#-0x1]
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0x880, 1)
	 ---  CBRANCH (ram, 0x5eb2c, 4) , (unique, 0x1480, 1)
	(unique, 0x6100, 4) INT_ADD (register, 0x2c, 4) , (const, 0xffffffff, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x24, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

0005eb2c: add r3,r0,#0xa0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xa0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0xa0, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0xa0, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x20, 4) , (const, 0xa0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0005eb30: str r3,[r0,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

0005eb34: str r2,[r0,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

0005eb38: str r2,[r0,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

0005eb3c: bx lr
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

