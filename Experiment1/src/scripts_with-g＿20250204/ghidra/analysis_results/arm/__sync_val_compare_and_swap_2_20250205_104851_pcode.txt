Function: __sync_val_compare_and_swap_2
Address: 0006eba0
P-code:

0006eba0: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006eba4: mov r5,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x34, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006eba8: mov r7,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x3c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebac: ldr r6,[0x6ec0c]
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (const, 0x6ec0c, 4)

0006ebb0: mov r4,r0, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x30, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebb4: and r4,r4,#0x18
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0006ebb8: mov r9,r6, lsl r4
	(unique, 0x3800, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x3880, 4) INT_SUB (const, 0x20, 4) , (unique, 0x3800, 4)
	(unique, 0x3900, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3880, 4)
	(unique, 0x3a00, 4) INT_AND (unique, 0x3900, 4) , (const, 0x1, 4)
	(unique, 0x3a80, 1) INT_EQUAL (unique, 0x3800, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 1) BOOL_AND (unique, 0x3a80, 1) , (register, 0x62, 1)
	(unique, 0x3b80, 1) INT_NOTEQUAL (unique, 0x3800, 4) , (const, 0x0, 4)
	(unique, 0x3c00, 1) SUBPIECE (unique, 0x3a00, 4) , (const, 0x0, 4)
	(unique, 0x3c80, 1) BOOL_AND (unique, 0x3b80, 1) , (unique, 0x3c00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x3b00, 1) , (unique, 0x3c80, 1)
	(unique, 0x3e00, 4) INT_LEFT (register, 0x38, 4) , (unique, 0x3800, 4)
	(register, 0x44, 4) COPY (unique, 0x3e00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebbc: bic r8,r0,#0x3
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(unique, 0x10880, 4) INT_NEGATE (const, 0x3, 4)
	(register, 0x40, 4) INT_AND (register, 0x20, 4) , (unique, 0x10880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)

0006ebc0: and r6,r6,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x38, 4) INT_AND (register, 0x38, 4) , (register, 0x24, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

0006ebc4: ldr r0,[r8,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0006ebc8: and r3,r9,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x44, 4) , (register, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006ebcc: cmp r6,r3, lsr r4
	(unique, 0x3f00, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x3f80, 4) INT_SUB (unique, 0x3f00, 4) , (const, 0x1, 4)
	(unique, 0x4000, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3f80, 4)
	(unique, 0x4100, 4) INT_AND (unique, 0x4000, 4) , (const, 0x1, 4)
	(unique, 0x4180, 1) INT_EQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4200, 1) BOOL_AND (unique, 0x4180, 1) , (register, 0x62, 1)
	(unique, 0x4280, 1) INT_NOTEQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4300, 1) SUBPIECE (unique, 0x4100, 4) , (const, 0x0, 4)
	(unique, 0x4380, 1) BOOL_AND (unique, 0x4280, 1) , (unique, 0x4300, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4200, 1) , (unique, 0x4380, 1)
	(unique, 0x4500, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3f00, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x4500, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (unique, 0x4500, 4)
	(unique, 0x11900, 4) INT_SUB (register, 0x38, 4) , (unique, 0x4500, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006ebd0: mov r2,r3, lsr r4
	(unique, 0x3f00, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x3f80, 4) INT_SUB (unique, 0x3f00, 4) , (const, 0x1, 4)
	(unique, 0x4000, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3f80, 4)
	(unique, 0x4100, 4) INT_AND (unique, 0x4000, 4) , (const, 0x1, 4)
	(unique, 0x4180, 1) INT_EQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4200, 1) BOOL_AND (unique, 0x4180, 1) , (register, 0x62, 1)
	(unique, 0x4280, 1) INT_NOTEQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4300, 1) SUBPIECE (unique, 0x4100, 4) , (const, 0x0, 4)
	(unique, 0x4380, 1) BOOL_AND (unique, 0x4280, 1) , (unique, 0x4300, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4200, 1) , (unique, 0x4380, 1)
	(unique, 0x4500, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3f00, 4)
	(register, 0x28, 4) COPY (unique, 0x4500, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebd4: beq 0x0006ebe8
	 ---  CBRANCH (ram, 0x6ebe8, 4) , (register, 0x61, 1)

0006ebd8: mov r5,r2, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x28, 4) , (const, 0x10, 4)
	(register, 0x34, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebdc: mov r5,r5, asr #0x10
	(unique, 0x2b80, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2c00, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x2b80, 4)
	(unique, 0x2d00, 4) INT_AND (unique, 0x2c00, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2d00, 4) , (const, 0x0, 4)
	(unique, 0x2e80, 4) INT_SRIGHT (register, 0x34, 4) , (const, 0x10, 4)
	(register, 0x34, 4) COPY (unique, 0x2e80, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebe0: mov r0,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebe4: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0006ebe8: eor r1,r0,r7, lsl r4
	(unique, 0x3800, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x3880, 4) INT_SUB (const, 0x20, 4) , (unique, 0x3800, 4)
	(unique, 0x3900, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3880, 4)
	(unique, 0x3a00, 4) INT_AND (unique, 0x3900, 4) , (const, 0x1, 4)
	(unique, 0x3a80, 1) INT_EQUAL (unique, 0x3800, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 1) BOOL_AND (unique, 0x3a80, 1) , (register, 0x62, 1)
	(unique, 0x3b80, 1) INT_NOTEQUAL (unique, 0x3800, 4) , (const, 0x0, 4)
	(unique, 0x3c00, 1) SUBPIECE (unique, 0x3a00, 4) , (const, 0x0, 4)
	(unique, 0x3c80, 1) BOOL_AND (unique, 0x3b80, 1) , (unique, 0x3c00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x3b00, 1) , (unique, 0x3c80, 1)
	(unique, 0x3e00, 4) INT_LEFT (register, 0x3c, 4) , (unique, 0x3800, 4)
	(register, 0x24, 4) INT_XOR (register, 0x20, 4) , (unique, 0x3e00, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ebec: and r1,r1,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_AND (register, 0x24, 4) , (register, 0x44, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ebf0: mov r2,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ebf4: ldr r3,[0x6ec10]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6ec10, 4)

0006ebf8: eor r1,r1,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_XOR (register, 0x24, 4) , (register, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ebfc: blx r3
	(unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
	(register, 0x58, 4) COPY (const, 0x6ec00, 4)
	 ---  CALLIND (register, 0x5c, 4)

