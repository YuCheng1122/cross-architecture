Function: __gconv_get_builtin_trans
Address: 000499f0
P-code:

000499f0: stmdb sp!,{r4,r5,r6,r7,r8,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

000499f4: mov r4,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x30, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000499f8: mov r7,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x3c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000499fc: mov r6,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x38, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00049a00: ldr r5,[0x49a94]
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x49a94, 4)

00049a04: add r5,pc,r5
	(unique, 0x580, 4) INT_ADD (const, 0x49a04, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x34, 4)
	(register, 0x34, 4) INT_ADD (unique, 0x580, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00049a08: mov r0,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00049a0c: ldr r1,[r5,r4,lsl #0x4]
	(unique, 0x5580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x4, 4)
	(unique, 0x6200, 4) INT_ADD (register, 0x34, 4) , (unique, 0x5580, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

00049a10: bl 0x0003c5c4
	(register, 0x58, 4) COPY (const, 0x49a14, 4)
	 ---  CALL (ram, 0x3c5c4, 4)

00049a14: cmp r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00049a18: beq 0x00049a48
	 ---  CBRANCH (ram, 0x49a48, 4) , (register, 0x61, 1)

00049a1c: add r4,r4,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x1, 4)
	(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00049a20: cmp r4,#0xc
	(unique, 0x1c00, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0xc, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x30, 4) , (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00049a24: bne 0x00049a08
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x49a08, 4) , (unique, 0x880, 1)

00049a28: ldr r3,[0x49a98]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x49a98, 4)

00049a2c: ldr r1,[0x49a9c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x49a9c, 4)

00049a30: ldr r0,[0x49aa0]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x49aa0, 4)

00049a34: mov r2,#0x45
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x45, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x45, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00049a38: add r3,pc,r3
	(unique, 0x580, 4) INT_ADD (const, 0x49a38, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x580, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00049a3c: add r1,pc,r1
	(unique, 0x580, 4) INT_ADD (const, 0x49a3c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00049a40: add r0,pc,r0
	(unique, 0x580, 4) INT_ADD (const, 0x49a40, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00049a44: bl 0x0002e594
	(register, 0x58, 4) COPY (const, 0x49a48, 4)
	 ---  CALL (ram, 0x2e594, 4)

00049a48: add r5,r5,r4, lsl #0x4
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x34, 4) INT_ADD (register, 0x34, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00049a4c: ldr r3,[r5,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00049a50: ldr r2,[r5,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00049a54: str r3,[r6,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00049a58: ldrsb r3,[r5,#0xc]
	(unique, 0x6f00, 4) INT_ADD (register, 0x34, 4) , (const, 0xc, 4)
	(unique, 0x12c00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6f00, 4)
	(register, 0x2c, 4) INT_SEXT (unique, 0x12c00, 1)

00049a5c: ldrsb r1,[r5,#0xd]
	(unique, 0x6f00, 4) INT_ADD (register, 0x34, 4) , (const, 0xd, 4)
	(unique, 0x12c00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6f00, 4)
	(register, 0x24, 4) INT_SEXT (unique, 0x12c00, 1)

00049a60: str r2,[r6,#0x18]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00049a64: str r3,[r6,#0x24]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00049a68: ldrsb r2,[r5,#0xe]
	(unique, 0x6f00, 4) INT_ADD (register, 0x34, 4) , (const, 0xe, 4)
	(unique, 0x12c00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6f00, 4)
	(register, 0x28, 4) INT_SEXT (unique, 0x12c00, 1)

00049a6c: ldrsb r3,[r5,#0xf]
	(unique, 0x6f00, 4) INT_ADD (register, 0x34, 4) , (const, 0xf, 4)
	(unique, 0x12c00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6f00, 4)
	(register, 0x2c, 4) INT_SEXT (unique, 0x12c00, 1)

00049a70: str r0,[r6,#0x1c]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00049a74: str r0,[r6,#0x20]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00049a78: str r0,[r6,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00049a7c: str r0,[r6,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00049a80: str r1,[r6,#0x28]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x28, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x24, 4)

00049a84: str r2,[r6,#0x2c]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00049a88: str r3,[r6,#0x30]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x30, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00049a8c: str r0,[r6,#0x34]
	(unique, 0x6000, 4) INT_ADD (register, 0x38, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00049a90: ldmia sp!,{r4,r5,r6,r7,r8,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

