Function: _dl_debug_update
Address: 0002be1c
P-code:

0002be1c: ldr r2,[0x2be98]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x2be98, 4)

0002be20: subs r3,r0,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002be24: add r2,pc,r2
	(unique, 0x580, 4) INT_ADD (const, 0x2be24, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x580, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0002be28: beq 0x0002be8c
	 ---  CBRANCH (ram, 0x2be8c, 4) , (register, 0x61, 1)

0002be2c: ldr r1,[0x2be9c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x2be9c, 4)

0002be30: add r0,r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x20, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0002be34: add r0,r3,r0, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x20, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0002be38: ldr r1,[r2,r1]
	(unique, 0x6200, 4) INT_ADD (register, 0x28, 4) , (register, 0x24, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

0002be3c: mov r0,r0, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x20, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002be40: add r0,r0,#0x40
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x40, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x40, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0002be44: add r0,r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0002be48: ldr r1,[r0,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0002be4c: cmp r1,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002be50: bxne lr
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0x880, 1)
	 ---  CBRANCH (ram, 0x2be54, 4) , (unique, 0x1480, 1)
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0002be54: stmdb sp!,{r4,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002be58: ldr r1,[0x2be9c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x2be9c, 4)

0002be5c: sub sp,sp,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0002be60: add r12,r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x50, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0002be64: str r0,[sp,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

0002be68: add r3,r3,r12, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x50, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002be6c: ldr r2,[r2,r1]
	(unique, 0x6200, 4) INT_ADD (register, 0x28, 4) , (register, 0x24, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

0002be70: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002be74: ldr r4,[r2,r3]
	(unique, 0x6200, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6200, 4)

0002be78: bl 0x0006ece8
	(register, 0x58, 4) COPY (const, 0x2be7c, 4)
	 ---  CALL (ram, 0x6ece8, 4)

0002be7c: ldr r0,[sp,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0002be80: str r4,[r0,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x30, 4)

0002be84: add sp,sp,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0002be88: ldmia sp!,{r4,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0002be8c: ldr r0,[0x2bea0]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x2bea0, 4)

0002be90: add r0,pc,r0
	(unique, 0x580, 4) INT_ADD (const, 0x2be90, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x580, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0002be94: b 0x0002be48
	 ---  BRANCH (ram, 0x2be48, 4)

