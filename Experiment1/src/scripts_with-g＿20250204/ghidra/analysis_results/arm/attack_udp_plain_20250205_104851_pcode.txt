Function: attack_udp_plain
Address: 00019cb8
P-code:

00019cb8: stmdb sp!,{r4,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00019cbc: add r11,sp,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

00019cc0: sub sp,sp,#0x44
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x44, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x44, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00019cc4: str r1,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x24, 4)

00019cc8: str r3,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019ccc: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019cd0: strb r3,[r11,#-0x3d]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc3, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00019cd4: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019cd8: strb r3,[r11,#-0x3e]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc2, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00019cdc: ldrb r3,[r11,#-0x3d]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc3, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00019ce0: mov r1,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ce4: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ce8: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x19cec, 4)
	 ---  CALL (ram, 0x26a60, 4)

00019cec: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019cf0: str r3,[r11,#-0x18]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019cf4: ldrb r3,[r11,#-0x3d]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc3, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00019cf8: mov r1,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019cfc: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d00: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x19d04, 4)
	 ---  CALL (ram, 0x26a60, 4)

00019d04: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d08: str r3,[r11,#-0x1c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019d0c: ldrb r0,[r11,#-0x3e]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc2, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00019d10: ldr r3,[0x1a094]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x1a094, 4)

00019d14: mov r2,#0x7
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x7, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d18: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019d1c: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x19d20, 4)
	 ---  CALL (ram, 0x16a74, 4)

00019d20: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d24: strh r3,[r11,#-0x1e]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019d28: ldrb r0,[r11,#-0x3e]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc2, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00019d2c: ldr r3,[0x1a094]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x1a094, 4)

00019d30: mov r2,#0x6
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d34: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019d38: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x19d3c, 4)
	 ---  CALL (ram, 0x16a74, 4)

00019d3c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d40: strh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019d44: ldrb r0,[r11,#-0x3e]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc2, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00019d48: mov r3,#0x200
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x200, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x200, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d4c: mov r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d50: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019d54: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x19d58, 4)
	 ---  CALL (ram, 0x16a74, 4)

00019d58: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d5c: strh r3,[r11,#-0x20]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019d60: ldrb r0,[r11,#-0x3e]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc2, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x12780, 1)

00019d64: mov r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d68: mov r2,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d6c: ldr r1,[r11,#-0x48]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019d70: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x19d74, 4)
	 ---  CALL (ram, 0x16a74, 4)

00019d74: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d78: strb r3,[r11,#-0x21]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdf, 4)
	(unique, 0x1d300, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (unique, 0x1d300, 1)

00019d7c: sub r3,r11,#0x38
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x38, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x4c, 4) , (const, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019d80: mov r2,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019d84: str r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00019d88: str r2,[r3,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00019d8c: str r2,[r3,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00019d90: str r2,[r3,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00019d94: ldrh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00019d98: ldr r2,[0x1a094]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x1a094, 4)

00019d9c: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00019da0: bne 0x00019db4
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x19db4, 4) , (unique, 0x880, 1)

00019da4: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x19da8, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00019da8: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019dac: strh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019db0: b 0x00019dc8
	 ---  BRANCH (ram, 0x19dc8, 4)

00019db4: ldrh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00019db8: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019dbc: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x19dc0, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00019dc0: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019dc4: strh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019dc8: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019dcc: str r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019dd0: b 0x00019ff4
	 ---  BRANCH (ram, 0x19ff4, 4)

00019dd4: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019dd8: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ddc: ldr r2,[r11,#-0x18]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019de0: add r4,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x30, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00019de4: mov r1,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019de8: ldr r0,[0x1a094]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x1a094, 4)

00019dec: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x19df0, 4)
	 ---  CALL (ram, 0x26a60, 4)

00019df0: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019df4: str r3,[r4,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00019df8: ldrh r3,[r11,#-0x1e]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe2, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00019dfc: ldr r2,[0x1a094]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x1a094, 4)

00019e00: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00019e04: bne 0x00019e40
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x19e40, 4) , (unique, 0x880, 1)

00019e08: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x19e0c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00019e0c: mov r1,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e10: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e14: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e18: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e1c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019e20: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e24: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e28: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e2c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019e30: mov r2,r1, lsl #0x10
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x24, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e34: mov r2,r2, lsr #0x10
	(unique, 0x2580, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x2600, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x2580, 4)
	(unique, 0x2700, 4) INT_AND (unique, 0x2600, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2700, 4) , (const, 0x0, 4)
	(unique, 0x2880, 4) INT_RIGHT (register, 0x28, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x2880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e38: strh r2,[r3,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00019e3c: b 0x00019e74
	 ---  BRANCH (ram, 0x19e74, 4)

00019e40: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e44: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e48: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e4c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019e50: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e54: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e58: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e5c: add r4,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x30, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00019e60: ldrh r3,[r11,#-0x1e]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe2, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00019e64: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e68: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x19e6c, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00019e6c: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e70: strh r3,[r4,#0x2]
	(unique, 0x6f00, 4) INT_ADD (register, 0x30, 4) , (const, 0x2, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6f00, 4) , (unique, 0x1d500, 2)

00019e74: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e78: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e7c: ldr r2,[r11,#-0x1c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019e80: add r4,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x30, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00019e84: mov r2,#0x11
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x11, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x11, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e88: mov r1,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x24, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e8c: mov r0,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e90: bl 0x0002bbc0
	(register, 0x58, 4) COPY (const, 0x19e94, 4)
	 ---  CALL (ram, 0x2bbc0, 4)

00019e94: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019e98: str r3,[r4,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00019e9c: ldr r3,[r4,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00019ea0: cmn r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x11400, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11400, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00019ea4: beq 0x0001a088
	 ---  CBRANCH (ram, 0x1a088, 4) , (register, 0x61, 1)

00019ea8: mov r3,#0x2
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019eac: strh r3,[r11,#-0x38]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019eb0: ldrh r3,[r11,#-0x12]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffee, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

00019eb4: strh r3,[r11,#-0x36]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffca, 4)
	(unique, 0x1d500, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x7000, 4) , (unique, 0x1d500, 2)

00019eb8: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ebc: str r3,[r11,#-0x34]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019ec0: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019ec4: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ec8: ldr r2,[r11,#-0x1c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019ecc: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019ed0: ldr r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00019ed4: sub r2,r11,#0x38
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x38, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x38, 4)
	(register, 0x28, 4) INT_SUB (register, 0x4c, 4) , (const, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00019ed8: mov r1,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019edc: mov r2,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ee0: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ee4: bl 0x0002b680
	(register, 0x58, 4) COPY (const, 0x19ee8, 4)
	 ---  CALL (ram, 0x2b680, 4)

00019ee8: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019eec: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ef0: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019ef4: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019ef8: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019efc: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f00: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f04: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f08: ldrb r3,[r3,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00019f0c: cmp r3,#0x1f
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1f, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00019f10: bhi 0x00019fa8
	(unique, 0xc00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0xd00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0xc00, 1)
	 ---  CBRANCH (ram, 0x19fa8, 4) , (unique, 0xd00, 1)

00019f14: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f18: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f1c: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f20: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f24: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f28: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f2c: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f30: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f34: ldr r3,[r3,#0x10]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00019f38: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f3c: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x19f40, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

00019f40: mov r4,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x30, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f44: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x19f48, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00019f48: mov r1,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f4c: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f50: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f54: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f58: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f5c: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f60: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f64: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f68: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f6c: ldrb r3,[r3,#0x14]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00019f70: mov r3,r1, lsr r3
	(unique, 0x3f00, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(unique, 0x3f80, 4) INT_SUB (unique, 0x3f00, 4) , (const, 0x1, 4)
	(unique, 0x4000, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3f80, 4)
	(unique, 0x4100, 4) INT_AND (unique, 0x4000, 4) , (const, 0x1, 4)
	(unique, 0x4180, 1) INT_EQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4200, 1) BOOL_AND (unique, 0x4180, 1) , (register, 0x62, 1)
	(unique, 0x4280, 1) INT_NOTEQUAL (unique, 0x3f00, 4) , (const, 0x0, 4)
	(unique, 0x4300, 1) SUBPIECE (unique, 0x4100, 4) , (const, 0x0, 4)
	(unique, 0x4380, 1) BOOL_AND (unique, 0x4280, 1) , (unique, 0x4300, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4200, 1) , (unique, 0x4380, 1)
	(unique, 0x4500, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3f00, 4)
	(register, 0x2c, 4) COPY (unique, 0x4500, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f74: add r1,r4,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x24, 4) INT_ADD (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00019f78: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f7c: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f80: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f84: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019f88: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f8c: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f90: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019f94: add r4,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x30, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00019f98: mov r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019f9c: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x19fa0, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

00019fa0: mov r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fa4: str r3,[r4,#0x4]
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00019fa8: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019fac: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fb0: ldr r2,[r11,#-0x1c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019fb4: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019fb8: ldr r0,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00019fbc: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019fc0: mov r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) COPY (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fc4: mov r3,r3, lsl #0x1
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fc8: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019fcc: mov r3,r3, lsl #0x3
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fd0: mov r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x28, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fd4: ldr r3,[r11,#-0x44]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019fd8: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019fdc: mov r2,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x28, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fe0: mov r1,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00019fe4: bl 0x0002b6a0
	(register, 0x58, 4) COPY (const, 0x19fe8, 4)
	 ---  CALL (ram, 0x2b6a0, 4)

00019fe8: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019fec: add r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00019ff0: str r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

00019ff4: ldrb r3,[r11,#-0x3d]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc3, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

00019ff8: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

00019ffc: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001a000: blt 0x00019dd4
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	 ---  CBRANCH (ram, 0x19dd4, 4) , (unique, 0x1080, 1)

0001a004: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a008: str r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

0001a00c: b 0x0001a074
	 ---  BRANCH (ram, 0x1a074, 4)

0001a010: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a014: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a018: ldr r2,[r11,#-0x18]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a01c: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001a020: ldr r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0001a024: str r3,[r11,#-0x28]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

0001a028: ldrb r3,[r11,#-0x21]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdf, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

0001a02c: cmp r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001a030: beq 0x0001a044
	 ---  CBRANCH (ram, 0x1a044, 4) , (register, 0x61, 1)

0001a034: ldrh r3,[r11,#-0x20]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12b00, 2)

0001a038: mov r1,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a03c: ldr r0,[r11,#-0x28]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a040: bl 0x0001cc18
	(register, 0x58, 4) COPY (const, 0x1a044, 4)
	 ---  CALL (ram, 0x1cc18, 4)

0001a044: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a048: mov r3,r3, lsl #0x2
	(unique, 0x2000, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x2080, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x2000, 4)
	(unique, 0x2180, 4) INT_AND (unique, 0x2080, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x2180, 4) , (const, 0x0, 4)
	(unique, 0x2300, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x2300, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a04c: ldr r2,[r11,#-0x1c]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a050: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001a054: ldr r0,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

0001a058: ldrh r2,[r11,#-0x20]
	(unique, 0x7000, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(unique, 0x12b00, 2) LOAD (const, 0x1a1, 8) , (unique, 0x7000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12b00, 2)

0001a05c: mov r3,#0x4000
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a060: ldr r1,[r11,#-0x28]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a064: bl 0x0002b9b4
	(register, 0x58, 4) COPY (const, 0x1a068, 4)
	 ---  CALL (ram, 0x2b9b4, 4)

0001a068: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a06c: add r3,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001a070: str r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x2c, 4)

0001a074: ldrb r3,[r11,#-0x3d]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc3, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

0001a078: ldr r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001a07c: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001a080: blt 0x0001a010
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	 ---  CBRANCH (ram, 0x1a010, 4) , (unique, 0x1080, 1)

0001a084: b 0x0001a004
	 ---  BRANCH (ram, 0x1a004, 4)

0001a088: mov r0,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001a08c: sub sp,r11,#0x8
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x54, 4) INT_SUB (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0001a090: ldmia sp!,{r4,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

