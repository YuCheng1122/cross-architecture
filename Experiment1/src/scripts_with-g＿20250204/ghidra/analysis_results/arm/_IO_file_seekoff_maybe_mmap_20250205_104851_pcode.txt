Function: _IO_file_seekoff_maybe_mmap
Address: 00036b4c
P-code:

00036b4c: stmdb sp!,{r4,r5,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00036b50: ldr r1,[0x36bbc]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x36bbc, 4)

00036b54: ldr r5,[r0,#0x98]
	(unique, 0x6000, 4) INT_ADD (register, 0x20, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00036b58: ldr r12,[0x36bc0]
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x36bc0, 4)

00036b5c: add r1,pc,r1
	(unique, 0x580, 4) INT_ADD (const, 0x36b5c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x580, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00036b60: sub r1,r5,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_SUB (register, 0x34, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00036b64: cmp r1,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00036b68: mov r4,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x30, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00036b6c: sub sp,sp,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00036b70: bhi 0x00036ba4
	(unique, 0xc00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0xd00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0xc00, 1)
	 ---  CBRANCH (ram, 0x36ba4, 4) , (unique, 0xd00, 1)

00036b74: ldr r1,[sp,#0x20]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00036b78: mov r0,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00036b7c: str r1,[sp,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x24, 4)

00036b80: ldr r1,[r5,#0x40]
	(unique, 0x6000, 4) INT_ADD (register, 0x34, 4) , (const, 0x40, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00036b84: blx r1
	(unique, 0x0, 4) INT_AND (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x24, 4) , (const, 0xfffffffe, 4)
	(register, 0x58, 4) COPY (const, 0x36b88, 4)
	 ---  CALLIND (register, 0x5c, 4)

00036b88: cmp r1,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00036b8c: mvnlt r0,#0x0
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0x1080, 1)
	 ---  CBRANCH (ram, 0x36b90, 4) , (unique, 0x1480, 1)
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x20, 4) INT_NEGATE (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00036b90: movlt r1,r0
	(unique, 0x1080, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0x1080, 1)
	 ---  CBRANCH (ram, 0x36b94, 4) , (unique, 0x1480, 1)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) COPY (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00036b94: strge r0,[r4,#0x50]
	(unique, 0xf80, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0xf80, 1)
	 ---  CBRANCH (ram, 0x36b98, 4) , (unique, 0x1480, 1)
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x20, 4)

00036b98: strge r1,[r4,#0x54]
	(unique, 0xf80, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x1480, 1) BOOL_NEGATE (unique, 0xf80, 1)
	 ---  CBRANCH (ram, 0x36b9c, 4) , (unique, 0x1480, 1)
	(unique, 0x6000, 4) INT_ADD (register, 0x30, 4) , (const, 0x54, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x24, 4)

00036b9c: add sp,sp,#0x14
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00036ba0: ldmia sp!,{r4,r5,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

00036ba4: str r3,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x2c, 4)

00036ba8: str r2,[sp,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6000, 4) , (register, 0x28, 4)

00036bac: bl 0x00034bdc
	(register, 0x58, 4) COPY (const, 0x36bb0, 4)
	 ---  CALL (ram, 0x34bdc, 4)

00036bb0: ldr r3,[sp,#0xc]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00036bb4: ldr r2,[sp,#0x8]
	(unique, 0x6000, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)

00036bb8: b 0x00036b74
	 ---  BRANCH (ram, 0x36b74, 4)

