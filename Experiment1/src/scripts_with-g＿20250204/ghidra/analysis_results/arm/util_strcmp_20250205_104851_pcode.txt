Function: util_strcmp
Address: 0001dfa8
P-code:

0001dfa8: stmdb sp!,{r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0001dfac: add r11,sp,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

0001dfb0: sub sp,sp,#0x10
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x10, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x10, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0001dfb4: str r0,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x20, 4)

0001dfb8: str r1,[r11,#-0x14]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x24, 4)

0001dfbc: ldr r0,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001dfc0: bl 0x0001dea8
	(register, 0x58, 4) COPY (const, 0x1dfc4, 4)
	 ---  CALL (ram, 0x1dea8, 4)

0001dfc4: str r0,[r11,#-0x8]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x20, 4)

0001dfc8: ldr r0,[r11,#-0x14]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001dfcc: bl 0x0001dea8
	(register, 0x58, 4) COPY (const, 0x1dfd0, 4)
	 ---  CALL (ram, 0x1dea8, 4)

0001dfd0: str r0,[r11,#-0xc]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x20, 4)

0001dfd4: ldr r2,[r11,#-0x8]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001dfd8: ldr r3,[r11,#-0xc]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001dfdc: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001dfe0: beq 0x0001e01c
	 ---  CBRANCH (ram, 0x1e01c, 4) , (register, 0x61, 1)

0001dfe4: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001dfe8: b 0x0001e034
	 ---  BRANCH (ram, 0x1e034, 4)

0001dfec: ldr r3,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001dff0: add r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0001dff4: str r2,[r11,#-0x10]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

0001dff8: ldrb r2,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x12780, 1)

0001dffc: ldr r3,[r11,#-0x14]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001e000: add r1,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0001e004: str r1,[r11,#-0x14]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x24, 4)

0001e008: ldrb r3,[r3,#0x0]
	(unique, 0x6000, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x12780, 1) LOAD (const, 0x1a1, 8) , (unique, 0x6000, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x12780, 1)

0001e00c: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x11800, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11800, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e010: beq 0x0001e01c
	 ---  CBRANCH (ram, 0x1e01c, 4) , (register, 0x61, 1)

0001e014: mov r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001e018: b 0x0001e034
	 ---  BRANCH (ram, 0x1e034, 4)

0001e01c: ldr r3,[r11,#-0x8]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x6100, 4)

0001e020: sub r2,r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0001e024: str r2,[r11,#-0x8]
	(unique, 0x6100, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x6100, 4) , (register, 0x28, 4)

0001e028: cmp r3,#0x0
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x11700, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x11700, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e02c: bne 0x0001dfec
	(unique, 0x880, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x1dfec, 4) , (unique, 0x880, 1)

0001e030: mov r3,#0x1
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001e034: mov r0,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001e038: sub sp,r11,#0x4
	(unique, 0x1c00, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x1c80, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1d00, 1) BOOL_AND (unique, 0x1c80, 1) , (register, 0x62, 1)
	(unique, 0x1d80, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x1e00, 1) SUBPIECE (unique, 0x1c00, 4) , (const, 0x0, 4)
	(unique, 0x1e80, 1) BOOL_AND (unique, 0x1d80, 1) , (unique, 0x1e00, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x1d00, 1) , (unique, 0x1e80, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_SUB (register, 0x4c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0001e03c: ldmia sp!,{r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

