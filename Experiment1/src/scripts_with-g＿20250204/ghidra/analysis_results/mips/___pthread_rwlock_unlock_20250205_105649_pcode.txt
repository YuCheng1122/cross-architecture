Function: ___pthread_rwlock_unlock
Address: 00465d90
P-code:

00465d90: lui gp,0x5
	(register, 0x70, 4) INT_LEFT (const, 0x5, 4) , (const, 0x10, 4)

00465d94: addiu gp,gp,0x50d0
	(register, 0x70, 4) INT_ADD (register, 0x70, 4) , (const, 0x50d0, 4)

00465d98: addu gp,gp,t9
	(register, 0x70, 4) INT_ADD (register, 0x70, 4) , (register, 0x64, 4)

00465d9c: addiu sp,sp,-0x30
	(register, 0x74, 4) INT_ADD (register, 0x74, 4) , (const, 0xffffffd0, 4)

00465da0: sw s0,0x1c(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x1c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x40, 4)

00465da4: sw gp,0x10(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x10, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x70, 4)

00465da8: sw ra,0x2c(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x2c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x7c, 4)

00465dac: sw s3,0x28(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x28, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4c, 4)

00465db0: sw s2,0x24(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x24, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x48, 4)

00465db4: sw s1,0x20(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x20, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x44, 4)

00465db8: or s0,a0,zero
	(register, 0x40, 4) INT_OR (register, 0x10, 4) , (const, 0x0, 4)

00465dbc: lw v0,0x1c(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x1c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465dc0: rdhwr v1,HW_ULR
	(register, 0xc, 4) CALLOTHER (const, 0x26, 4) , (register, 0x3274, 4)

00465dc4: lbu a1,0x1a(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x1a, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(unique, 0x2f00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)
	(register, 0x14, 4) INT_ZEXT (unique, 0x2f00, 1)

00465dc8: lw v1,-0x7478(v1)
	(unique, 0x100, 4) INT_ADD (register, 0xc, 4) , (const, 0xffff8b88, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0xc, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465dcc: sltu a1,zero,a1
	(unique, 0x5380, 1) INT_LESS (const, 0x0, 4) , (register, 0x14, 4)
	(register, 0x14, 4) INT_ZEXT (unique, 0x5380, 1)

00465dd0: beq v1,v0,0x00465f00
	(unique, 0x1200, 1) INT_EQUAL (register, 0xc, 4) , (register, 0x8, 4)
	(register, 0x48, 4) INT_LEFT (register, 0x14, 4) , (const, 0x7, 4)
	 ---  CBRANCH (ram, 0x465f00, 4) , (unique, 0x1200, 1)

00465dd4: _sll s2,a1,0x7
	(register, 0x48, 4) INT_LEFT (register, 0x14, 4) , (const, 0x7, 4)

00465dd8: lw v0,0x0(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465ddc: nop

00465de0: addiu s1,v0,-0x8
	(register, 0x44, 4) INT_ADD (register, 0x8, 4) , (const, 0xfffffff8, 4)

00465de4: srl v1,s1,0x3
	(register, 0xc, 4) INT_RIGHT (register, 0x44, 4) , (const, 0x3, 4)

00465de8: beq v1,zero,0x00465e84
	(unique, 0x1200, 1) INT_EQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0xc, 4) INT_AND (register, 0x44, 4) , (const, 0x2, 4)
	 ---  CBRANCH (ram, 0x465e84, 4) , (unique, 0x1200, 1)

00465dec: _andi v1,s1,0x2
	(register, 0xc, 4) INT_AND (register, 0x44, 4) , (const, 0x2, 4)

00465df0: sync 0x0
	 ---  CALLOTHER (const, 0x29, 4) , (const, 0x0, 1)

00465df4: ll s3,0x0(s0)
	(unique, 0x100, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465df8: bne s3,v0,0x00465e10
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x4c, 4) , (register, 0x8, 4)
	(register, 0xc, 4) COPY (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465e10, 4) , (unique, 0x1700, 1)

00465dfc: _li v1,0x0
	(register, 0xc, 4) COPY (const, 0x0, 4)

00465e00: or at,s1,zero
	(register, 0x4, 4) INT_OR (register, 0x44, 4) , (const, 0x0, 4)

00465e04: sc at,0x0(s0)
	(unique, 0x100, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465e08: beq at,zero,0x00465df4
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	(register, 0xc, 4) COPY (const, 0x1, 4)
	 ---  CBRANCH (ram, 0x465df4, 4) , (unique, 0x1200, 1)

00465e0c: _li v1,0x1
	(register, 0xc, 4) COPY (const, 0x1, 4)

00465e10: beq v1,zero,0x00465de0
	(unique, 0x1200, 1) INT_EQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0x8, 4) INT_OR (register, 0x4c, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465de0, 4) , (unique, 0x1200, 1)

00465e14: _or v0,s3,zero
	(register, 0x8, 4) INT_OR (register, 0x4c, 4) , (const, 0x0, 4)

00465e18: andi v0,s1,0x1
	(register, 0x8, 4) INT_AND (register, 0x44, 4) , (const, 0x1, 4)

00465e1c: bne v0,zero,0x00465e98
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x10, 4) INT_ADD (register, 0x40, 4) , (const, 0x8, 4)
	 ---  CBRANCH (ram, 0x465e98, 4) , (unique, 0x1700, 1)

00465e20: _addiu a0,s0,0x8
	(register, 0x10, 4) INT_ADD (register, 0x40, 4) , (const, 0x8, 4)

00465e24: xor s1,s1,s3
	(register, 0x44, 4) INT_XOR (register, 0x44, 4) , (register, 0x4c, 4)

00465e28: andi s1,s1,0x4
	(register, 0x44, 4) INT_AND (register, 0x44, 4) , (const, 0x4, 4)

00465e2c: beq s1,zero,0x00465e64
	(unique, 0x1200, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)
	 ---  CBRANCH (ram, 0x465e64, 4) , (unique, 0x1200, 1)

00465e30: _lui a2,0x7fff
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)

00465e34: or a0,s0,zero
	(register, 0x10, 4) INT_OR (register, 0x40, 4) , (const, 0x0, 4)

00465e38: xori a1,s2,0x81
	(register, 0x14, 4) INT_XOR (register, 0x48, 4) , (const, 0x81, 4)

00465e3c: ori a2,a2,0xffff
	(register, 0x18, 4) INT_OR (register, 0x18, 4) , (const, 0xffff, 4)

00465e40: or a3,zero,zero
	(register, 0x1c, 4) INT_OR (const, 0x0, 4) , (const, 0x0, 4)

00465e44: li v0,0x108e
	(register, 0x8, 4) COPY (const, 0x108e, 4)

00465e48: syscall
	 ---  CALLOTHER (const, 0x3, 4) , (const, 0x0, 4)

00465e4c: beq a3,zero,0x00465e5c
	(unique, 0x1200, 1) INT_EQUAL (register, 0x1c, 4) , (const, 0x0, 4)
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)
	 ---  CBRANCH (ram, 0x465e5c, 4) , (unique, 0x1200, 1)

00465e50: _sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00465e54: subu v0,zero,v0
	(register, 0x8, 4) INT_SUB (const, 0x0, 4) , (register, 0x8, 4)

00465e58: sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00465e5c: beq v1,zero,0x0046604c
	(unique, 0x1200, 1) INT_EQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)
	 ---  CBRANCH (ram, 0x46604c, 4) , (unique, 0x1200, 1)

00465e60: _li v1,-0x16
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)

00465e64: lw ra,0x2c(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x2c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x7c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465e68: lw s3,0x28(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x28, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465e6c: lw s2,0x24(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x24, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465e70: lw s1,0x20(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x20, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465e74: lw s0,0x1c(sp)
	(unique, 0x100, 4) INT_ADD (register, 0x74, 4) , (const, 0x1c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465e78: or v0,zero,zero
	(register, 0x8, 4) INT_OR (const, 0x0, 4) , (const, 0x0, 4)

00465e7c: jr ra
	(unique, 0xc80, 4) INT_AND (register, 0x7c, 4) , (const, 0x1, 4)
	(register, 0x3f00, 1) INT_NOTEQUAL (unique, 0xc80, 4) , (const, 0x0, 4)
	(unique, 0xe00, 4) INT_2COMP (const, 0x2, 4)
	(unique, 0xe00, 4) INT_AND (unique, 0xe00, 4) , (register, 0x7c, 4)
	(register, 0x80, 4) COPY (unique, 0xe00, 4)
	(register, 0x74, 4) INT_ADD (register, 0x74, 4) , (const, 0x30, 4)
	 ---  RETURN (register, 0x80, 4)

00465e80: _addiu sp,sp,0x30
	(register, 0x74, 4) INT_ADD (register, 0x74, 4) , (const, 0x30, 4)

00465e84: beq v1,zero,0x00465e90
	(unique, 0x1200, 1) INT_EQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0xc, 4) COPY (const, 0xfffffffb, 4)
	 ---  CBRANCH (ram, 0x465e90, 4) , (unique, 0x1200, 1)

00465e88: _li v1,-0x5
	(register, 0xc, 4) COPY (const, 0xfffffffb, 4)

00465e8c: ori s1,s1,0x1
	(register, 0x44, 4) INT_OR (register, 0x44, 4) , (const, 0x1, 4)

00465e90: b 0x00465df0
	(register, 0x44, 4) INT_AND (register, 0x44, 4) , (register, 0xc, 4)
	 ---  BRANCH (ram, 0x465df0, 4)

00465e94: _and s1,s1,v1
	(register, 0x44, 4) INT_AND (register, 0x44, 4) , (register, 0xc, 4)

00465e98: sync 0x0
	 ---  CALLOTHER (const, 0x29, 4) , (const, 0x0, 1)

00465e9c: ll v0,0x0(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465ea0: li at,0x1
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465ea4: sc at,0x0(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465ea8: beq at,zero,0x00465e9c
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465e9c, 4) , (unique, 0x1200, 1)

00465eac: _nop

00465eb0: andi v0,v0,0x2
	(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x2, 4)

00465eb4: beq v0,zero,0x00465e24
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)
	 ---  CBRANCH (ram, 0x465e24, 4) , (unique, 0x1200, 1)

00465eb8: _lui a2,0x7fff
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)

00465ebc: xori a1,s2,0x81
	(register, 0x14, 4) INT_XOR (register, 0x48, 4) , (const, 0x81, 4)

00465ec0: ori a2,a2,0xffff
	(register, 0x18, 4) INT_OR (register, 0x18, 4) , (const, 0xffff, 4)

00465ec4: or a3,zero,zero
	(register, 0x1c, 4) INT_OR (const, 0x0, 4) , (const, 0x0, 4)

00465ec8: li v0,0x108e
	(register, 0x8, 4) COPY (const, 0x108e, 4)

00465ecc: syscall
	 ---  CALLOTHER (const, 0x3, 4) , (const, 0x0, 4)

00465ed0: beq a3,zero,0x00465ee0
	(unique, 0x1200, 1) INT_EQUAL (register, 0x1c, 4) , (const, 0x0, 4)
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)
	 ---  CBRANCH (ram, 0x465ee0, 4) , (unique, 0x1200, 1)

00465ed4: _sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00465ed8: subu v0,zero,v0
	(register, 0x8, 4) INT_SUB (const, 0x0, 4) , (register, 0x8, 4)

00465edc: sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00465ee0: bne v1,zero,0x00465e24
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)
	 ---  CBRANCH (ram, 0x465e24, 4) , (unique, 0x1700, 1)

00465ee4: _li v1,-0x16
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)

00465ee8: beq v0,v1,0x00465e24
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)
	 ---  CBRANCH (ram, 0x465e24, 4) , (unique, 0x1200, 1)

00465eec: _li v1,-0xe
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)

00465ef0: beq v0,v1,0x00465e24
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	 ---  CBRANCH (ram, 0x465e24, 4) , (unique, 0x1200, 1)

00465ef4: _nop

00465ef8: b 0x0046605c
	 ---  BRANCH (ram, 0x46605c, 4)

00465efc: _nop

00465f00: addiu s3,a0,0xc
	(register, 0x4c, 4) INT_ADD (register, 0x10, 4) , (const, 0xc, 4)

00465f04: sw zero,0x1c(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x1c, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (const, 0x0, 4)

00465f08: ll s1,0x0(s3)
	(unique, 0x100, 4) INT_ADD (register, 0x4c, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465f0c: li at,0x0
	(register, 0x4, 4) COPY (const, 0x0, 4)

00465f10: sc at,0x0(s3)
	(unique, 0x100, 4) INT_ADD (register, 0x4c, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465f14: beq at,zero,0x00465f08
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465f08, 4) , (unique, 0x1200, 1)

00465f18: _nop

00465f1c: lbu v0,0x1b(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x1b, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(unique, 0x2f00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)
	(register, 0x8, 4) INT_ZEXT (unique, 0x2f00, 1)

00465f20: nop

00465f24: bne v0,zero,0x00465fa4
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x44, 4) INT_AND (register, 0x44, 4) , (const, 0x2, 4)
	 ---  CBRANCH (ram, 0x465fa4, 4) , (unique, 0x1700, 1)

00465f28: _andi s1,s1,0x2
	(register, 0x44, 4) INT_AND (register, 0x44, 4) , (const, 0x2, 4)

00465f2c: lw v0,0x0(s0)
	(unique, 0x100, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465f30: nop

00465f34: srl v1,v0,0x3
	(register, 0xc, 4) INT_RIGHT (register, 0x8, 4) , (const, 0x3, 4)

00465f38: sltu v1,zero,v1
	(unique, 0x5380, 1) INT_LESS (const, 0x0, 4) , (register, 0xc, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5380, 1)

00465f3c: xor v1,v1,v0
	(register, 0xc, 4) INT_XOR (register, 0xc, 4) , (register, 0x8, 4)

00465f40: xori v1,v1,0x2
	(register, 0xc, 4) INT_XOR (register, 0xc, 4) , (const, 0x2, 4)

00465f44: sync 0x0
	 ---  CALLOTHER (const, 0x29, 4) , (const, 0x0, 1)

00465f48: ll a1,0x0(s0)
	(unique, 0x100, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x14, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465f4c: bne a1,v0,0x00465f64
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x14, 4) , (register, 0x8, 4)
	(register, 0x10, 4) COPY (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465f64, 4) , (unique, 0x1700, 1)

00465f50: _li a0,0x0
	(register, 0x10, 4) COPY (const, 0x0, 4)

00465f54: or at,v1,zero
	(register, 0x4, 4) INT_OR (register, 0xc, 4) , (const, 0x0, 4)

00465f58: sc at,0x0(s0)
	(unique, 0x100, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465f5c: beq at,zero,0x00465f48
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	(register, 0x10, 4) COPY (const, 0x1, 4)
	 ---  CBRANCH (ram, 0x465f48, 4) , (unique, 0x1200, 1)

00465f60: _li a0,0x1
	(register, 0x10, 4) COPY (const, 0x1, 4)

00465f64: beq a0,zero,0x00465f34
	(unique, 0x1200, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)
	(register, 0x8, 4) INT_OR (register, 0x14, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465f34, 4) , (unique, 0x1200, 1)

00465f68: _or v0,a1,zero
	(register, 0x8, 4) INT_OR (register, 0x14, 4) , (const, 0x0, 4)

00465f6c: srl v0,a1,0x3
	(register, 0x8, 4) INT_RIGHT (register, 0x14, 4) , (const, 0x3, 4)

00465f70: bne v0,zero,0x00465fe8
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x10, 4) INT_ADD (register, 0x40, 4) , (const, 0x8, 4)
	 ---  CBRANCH (ram, 0x465fe8, 4) , (unique, 0x1700, 1)

00465f74: _addiu a0,s0,0x8
	(register, 0x10, 4) INT_ADD (register, 0x40, 4) , (const, 0x8, 4)

00465f78: beq s1,zero,0x00465e64
	(unique, 0x1200, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x10, 4) INT_OR (register, 0x4c, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465e64, 4) , (unique, 0x1200, 1)

00465f7c: _or a0,s3,zero
	(register, 0x10, 4) INT_OR (register, 0x4c, 4) , (const, 0x0, 4)

00465f80: xori a1,s2,0x81
	(register, 0x14, 4) INT_XOR (register, 0x48, 4) , (const, 0x81, 4)

00465f84: li a2,0x1
	(register, 0x18, 4) COPY (const, 0x1, 4)

00465f88: or a3,zero,zero
	(register, 0x1c, 4) INT_OR (const, 0x0, 4) , (const, 0x0, 4)

00465f8c: li v0,0x108e
	(register, 0x8, 4) COPY (const, 0x108e, 4)

00465f90: syscall
	 ---  CALLOTHER (const, 0x3, 4) , (const, 0x0, 4)

00465f94: beq a3,zero,0x00465e5c
	(unique, 0x1200, 1) INT_EQUAL (register, 0x1c, 4) , (const, 0x0, 4)
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)
	 ---  CBRANCH (ram, 0x465e5c, 4) , (unique, 0x1200, 1)

00465f98: _sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00465f9c: b 0x00465e58
	(register, 0x8, 4) INT_SUB (const, 0x0, 4) , (register, 0x8, 4)
	 ---  BRANCH (ram, 0x465e58, 4)

00465fa0: _subu v0,zero,v0
	(register, 0x8, 4) INT_SUB (const, 0x0, 4) , (register, 0x8, 4)

00465fa4: lw v0,0x4(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x4, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465fa8: addiu v1,a0,0x4
	(register, 0xc, 4) INT_ADD (register, 0x10, 4) , (const, 0x4, 4)

00465fac: beq v0,zero,0x00465f2c
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x10, 4) INT_LEFT (const, 0x8000, 4) , (const, 0x10, 4)
	 ---  CBRANCH (ram, 0x465f2c, 4) , (unique, 0x1200, 1)

00465fb0: _lui a0,0x8000
	(register, 0x10, 4) INT_LEFT (const, 0x8000, 4) , (const, 0x10, 4)

00465fb4: or a0,v0,a0
	(register, 0x10, 4) INT_OR (register, 0x8, 4) , (register, 0x10, 4)

00465fb8: sync 0x0
	 ---  CALLOTHER (const, 0x29, 4) , (const, 0x0, 1)

00465fbc: ll a2,0x0(v1)
	(unique, 0x100, 4) INT_ADD (register, 0xc, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x18, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465fc0: bne a2,v0,0x00465fd8
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x18, 4) , (register, 0x8, 4)
	(register, 0x14, 4) COPY (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465fd8, 4) , (unique, 0x1700, 1)

00465fc4: _li a1,0x0
	(register, 0x14, 4) COPY (const, 0x0, 4)

00465fc8: or at,a0,zero
	(register, 0x4, 4) INT_OR (register, 0x10, 4) , (const, 0x0, 4)

00465fcc: sc at,0x0(v1)
	(unique, 0x100, 4) INT_ADD (register, 0xc, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465fd0: beq at,zero,0x00465fbc
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	(register, 0x14, 4) COPY (const, 0x1, 4)
	 ---  CBRANCH (ram, 0x465fbc, 4) , (unique, 0x1200, 1)

00465fd4: _li a1,0x1
	(register, 0x14, 4) COPY (const, 0x1, 4)

00465fd8: bne a1,zero,0x00465f78
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0x14, 4) , (const, 0x0, 4)
	(register, 0x8, 4) INT_OR (register, 0x18, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465f78, 4) , (unique, 0x1700, 1)

00465fdc: _or v0,a2,zero
	(register, 0x8, 4) INT_OR (register, 0x18, 4) , (const, 0x0, 4)

00465fe0: b 0x00465fac
	 ---  BRANCH (ram, 0x465fac, 4)

00465fe4: _nop

00465fe8: ll v0,0x0(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x8, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00465fec: li at,0x0
	(register, 0x4, 4) COPY (const, 0x0, 4)

00465ff0: sc at,0x0(a0)
	(unique, 0x100, 4) INT_ADD (register, 0x10, 4) , (const, 0x0, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x180, 4) , (register, 0x4, 4)
	(register, 0x4, 4) COPY (const, 0x1, 4)

00465ff4: beq at,zero,0x00465fe8
	(unique, 0x1200, 1) INT_EQUAL (register, 0x4, 4) , (const, 0x0, 4)
	 ---  CBRANCH (ram, 0x465fe8, 4) , (unique, 0x1200, 1)

00465ff8: _nop

00465ffc: andi v0,v0,0x2
	(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x2, 4)

00466000: beq v0,zero,0x00465f78
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)
	 ---  CBRANCH (ram, 0x465f78, 4) , (unique, 0x1200, 1)

00466004: _lui a2,0x7fff
	(register, 0x18, 4) INT_LEFT (const, 0x7fff, 4) , (const, 0x10, 4)

00466008: xori a1,s2,0x81
	(register, 0x14, 4) INT_XOR (register, 0x48, 4) , (const, 0x81, 4)

0046600c: ori a2,a2,0xffff
	(register, 0x18, 4) INT_OR (register, 0x18, 4) , (const, 0xffff, 4)

00466010: or a3,zero,zero
	(register, 0x1c, 4) INT_OR (const, 0x0, 4) , (const, 0x0, 4)

00466014: li v0,0x108e
	(register, 0x8, 4) COPY (const, 0x108e, 4)

00466018: syscall
	 ---  CALLOTHER (const, 0x3, 4) , (const, 0x0, 4)

0046601c: beq a3,zero,0x0046602c
	(unique, 0x1200, 1) INT_EQUAL (register, 0x1c, 4) , (const, 0x0, 4)
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)
	 ---  CBRANCH (ram, 0x46602c, 4) , (unique, 0x1200, 1)

00466020: _sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

00466024: subu v0,zero,v0
	(register, 0x8, 4) INT_SUB (const, 0x0, 4) , (register, 0x8, 4)

00466028: sltiu v1,v0,-0xfff
	(unique, 0x5280, 1) INT_LESS (register, 0x8, 4) , (const, 0xfffff001, 4)
	(register, 0xc, 4) INT_ZEXT (unique, 0x5280, 1)

0046602c: bne v1,zero,0x00465f78
	(unique, 0x1700, 1) INT_NOTEQUAL (register, 0xc, 4) , (const, 0x0, 4)
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)
	 ---  CBRANCH (ram, 0x465f78, 4) , (unique, 0x1700, 1)

00466030: _li v1,-0x16
	(register, 0xc, 4) COPY (const, 0xffffffea, 4)

00466034: beq v0,v1,0x00465f78
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)
	 ---  CBRANCH (ram, 0x465f78, 4) , (unique, 0x1200, 1)

00466038: _li v1,-0xe
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)

0046603c: beq v0,v1,0x00465f78
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	 ---  CBRANCH (ram, 0x465f78, 4) , (unique, 0x1200, 1)

00466040: _nop

00466044: b 0x0046605c
	 ---  BRANCH (ram, 0x46605c, 4)

00466048: _nop

0046604c: beq v0,v1,0x00465e64
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)
	 ---  CBRANCH (ram, 0x465e64, 4) , (unique, 0x1200, 1)

00466050: _li v1,-0xe
	(register, 0xc, 4) COPY (const, 0xfffffff2, 4)

00466054: beq v0,v1,0x00465e64
	(unique, 0x1200, 1) INT_EQUAL (register, 0x8, 4) , (register, 0xc, 4)
	 ---  CBRANCH (ram, 0x465e64, 4) , (unique, 0x1200, 1)

00466058: _nop

0046605c: lw a0,-0x7fa8(gp)
	(unique, 0x100, 4) INT_ADD (register, 0x70, 4) , (const, 0xffff8058, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x10, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00466060: lw t9,-0x7e6c(gp)
	(unique, 0x100, 4) INT_ADD (register, 0x70, 4) , (const, 0xffff8194, 4)
	(unique, 0x180, 4) COPY (const, 0x0, 4)
	(unique, 0x180, 4) COPY (unique, 0x100, 4)
	(register, 0x64, 4) LOAD (const, 0x1a1, 8) , (unique, 0x180, 4)

00466064: nop

00466068: jalr t9
	(unique, 0xc80, 4) INT_AND (register, 0x64, 4) , (const, 0x1, 4)
	(register, 0x3f00, 1) INT_NOTEQUAL (unique, 0xc80, 4) , (const, 0x0, 4)
	(unique, 0xe00, 4) INT_2COMP (const, 0x2, 4)
	(unique, 0xe00, 4) INT_AND (unique, 0xe00, 4) , (register, 0x64, 4)
	(register, 0x80, 4) COPY (unique, 0xe00, 4)
	(register, 0x7c, 4) COPY (const, 0x466070, 4)
	(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3910, 4)
	 ---  CALLIND (register, 0x80, 4)

0046606c: _addiu a0,a0,0x3910
	(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3910, 4)

