Label: 886
Function: __rtld_static_init
Architecture: arm
Source File: Unknown
Entry Point: 0006b534

P-code:

0006b534: stmdb sp!,{r4,r5,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006b538: ldr r1,[0x6b65c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b65c, 4)

0006b53c: sub sp,sp,#0xc
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0006b540: str r1,[sp,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0006b544: ldr r3,[0x6b660]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b660, 4)

0006b548: ldr r1,[0x6b664]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b664, 4)

0006b54c: ldr r2,[0x6b668]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b668, 4)

0006b550: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x6b550, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006b554: add r1,pc,r1
	(unique, 0x1780, 4) INT_ADD (const, 0x6b554, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006b558: cpy r4,r0
	(register, 0x30, 4) COPY (register, 0x20, 4)

0006b55c: bl 0x0006d554
	(register, 0x58, 4) COPY (const, 0x6b560, 4)
	 ---  CALL (ram, 0x6d554, 4)

0006b560: ldr r5,[0x6b66c]
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b66c, 4)

0006b564: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006b568: add r5,pc,r5
	(unique, 0x1780, 4) INT_ADD (const, 0x6b568, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x34, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

0006b56c: beq 0x0006b63c
	 ---  CBRANCH (ram, 0x6b63c, 4) , (register, 0x61, 1)

0006b570: ldrh r3,[r0,#0xe]
	(unique, 0x9180, 4) INT_ADD (register, 0x20, 4) , (const, 0xe, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

0006b574: ldr r2,[0x6b670]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b670, 4)

0006b578: ldr r0,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b57c: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006b580: cmpne r4,#0x0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6b584, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006b584: movne r3,#0x1
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6b588, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006b588: moveq r3,#0x0
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6b58c, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006b58c: ldr r2,[0x6b674]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b674, 4)

0006b590: ldrne r3,[r4,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6b594, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b594: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6b594, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006b598: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b59c: add r3,r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006b5a0: str r2,[r3,#0x20]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b5a4: ldr r2,[0x6b678]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b678, 4)

0006b5a8: ldr r1,[0x6b67c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b67c, 4)

0006b5ac: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5ac, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006b5b0: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b5b4: add r1,pc,r1
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5b4, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006b5b8: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b5bc: ldr r2,[0x6b680]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b680, 4)

0006b5c0: ldr r1,[r1,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b5c4: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5c4, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006b5c8: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b5cc: str r1,[r3,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0006b5d0: str r2,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b5d4: ldr r2,[0x6b684]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b684, 4)

0006b5d8: ldr r1,[0x6b688]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b688, 4)

0006b5dc: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5dc, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006b5e0: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b5e4: ldr r12,[0x6b68c]
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b68c, 4)

0006b5e8: str r2,[r3,#0x1b8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1b8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b5ec: ldr r2,[0x6b690]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b690, 4)

0006b5f0: ldr r0,[0x6b694]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b694, 4)

0006b5f4: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5f4, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006b5f8: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006b5fc: add r12,pc,r12
	(unique, 0x1780, 4) INT_ADD (const, 0x6b5fc, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006b600: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x6b600, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0006b604: add r1,pc,r1
	(unique, 0x1780, 4) INT_ADD (const, 0x6b604, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006b608: str r0,[r3,#0x224]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x224, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006b60c: ldmia r1,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006b610: str r0,[r3,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x40, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006b614: str r1,[r3,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x44, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0006b618: ldmia r12,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x50, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006b61c: str r0,[r3,#0x1e0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1e0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006b620: str r1,[r3,#0x1e4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1e4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0006b624: str r2,[r3,#0x1b4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1b4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b628: ldr r2,[0x6b698]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b698, 4)

0006b62c: ldr r2,[r5,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0006b630: str r2,[r3,#0x220]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x220, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006b634: add sp,sp,#0xc
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0006b638: ldmia sp!,{r4,r5,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0006b63c: ldr r3,[0x6b69c]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b69c, 4)

0006b640: ldr r1,[0x6b6a0]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b6a0, 4)

0006b644: ldr r0,[0x6b6a4]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x6b6a4, 4)

0006b648: mov r2,#0x35
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x35, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x35, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006b64c: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x6b64c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006b650: add r1,pc,r1
	(unique, 0x1780, 4) INT_ADD (const, 0x6b650, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006b654: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x6b654, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0006b658: bl 0x0002e594
	(register, 0x58, 4) COPY (const, 0x6b65c, 4)
	 ---  CALL (ram, 0x2e594, 4)

