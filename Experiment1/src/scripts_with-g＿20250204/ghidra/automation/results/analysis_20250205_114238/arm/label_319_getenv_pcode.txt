Label: 319
Function: getenv
Architecture: arm
Source File: Unknown
Entry Point: 0002e74c

P-code:

0002e74c: stmdb sp!,{r4,r5,r6,r7,r8,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002e750: ldr r3,[0x2e7ec]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x2e7ec, 4)

0002e754: ldr r2,[0x2e7f0]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x2e7f0, 4)

0002e758: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x2e758, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002e75c: ldr r3,[r3,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0002e760: ldr r5,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002e764: cmp r5,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e768: beq 0x0002e7e4
	 ---  CBRANCH (ram, 0x2e7e4, 4) , (register, 0x61, 1)

0002e76c: ldrb r6,[r0,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x38, 4) INT_ZEXT (unique, 0x43980, 1)

0002e770: cpy r8,r0
	(register, 0x40, 4) COPY (register, 0x20, 4)

0002e774: cmp r6,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e778: cpyeq r4,r6
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2e77c, 4) , (unique, 0x2680, 1)
	(register, 0x30, 4) COPY (register, 0x38, 4)

0002e77c: beq 0x0002e7dc
	 ---  CBRANCH (ram, 0x2e7dc, 4) , (register, 0x61, 1)

0002e780: bl 0x000282c0
	(register, 0x58, 4) COPY (const, 0x2e784, 4)
	 ---  CALL (ram, 0x282c0, 4)

0002e784: ldr r4,[r5,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002e788: cpy r7,r0
	(register, 0x3c, 4) COPY (register, 0x20, 4)

0002e78c: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e790: bne 0x0002e7a4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2e7a4, 4) , (unique, 0x1a80, 1)

0002e794: b 0x0002e7dc
	 ---  BRANCH (ram, 0x2e7dc, 4)

0002e798: ldr r4,[r5,#0x4]!
	(register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x34, 4)

0002e79c: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e7a0: beq 0x0002e7dc
	 ---  CBRANCH (ram, 0x2e7dc, 4) , (register, 0x61, 1)

0002e7a4: ldrb r3,[r4,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0002e7a8: cmp r3,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x38, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e7ac: bne 0x0002e798
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2e798, 4) , (unique, 0x1a80, 1)

0002e7b0: cpy r2,r7
	(register, 0x28, 4) COPY (register, 0x3c, 4)

0002e7b4: cpy r1,r4
	(register, 0x24, 4) COPY (register, 0x30, 4)

0002e7b8: cpy r0,r8
	(register, 0x20, 4) COPY (register, 0x40, 4)

0002e7bc: bl 0x0003c80c
	(register, 0x58, 4) COPY (const, 0x2e7c0, 4)
	 ---  CALL (ram, 0x3c80c, 4)

0002e7c0: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e7c4: bne 0x0002e798
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2e798, 4) , (unique, 0x1a80, 1)

0002e7c8: ldrb r3,[r4,r7]
	(unique, 0x8480, 4) INT_ADD (register, 0x30, 4) , (register, 0x3c, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0002e7cc: cmp r3,#0x3d
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3d, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x3d, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3d, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3d, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002e7d0: bne 0x0002e798
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2e798, 4) , (unique, 0x1a80, 1)

0002e7d4: add r7,r7,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0x1, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

0002e7d8: add r4,r4,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x3c, 4)
	(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0002e7dc: cpy r0,r4
	(register, 0x20, 4) COPY (register, 0x30, 4)

0002e7e0: ldmia sp!,{r4,r5,r6,r7,r8,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0002e7e4: cpy r4,r5
	(register, 0x30, 4) COPY (register, 0x34, 4)

0002e7e8: b 0x0002e7dc
	 ---  BRANCH (ram, 0x2e7dc, 4)

