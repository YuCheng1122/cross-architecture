Label: 721
Function: _IO_wdefault_xsgetn
Architecture: arm
Source File: Unknown
Entry Point: 0005c824

P-code:

0005c824: ldr r3,[r0,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x5c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0005c828: stmdb sp!,{r4,r5,r6,r7,r8,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0005c82c: cpy r6,r1
	(register, 0x38, 4) COPY (register, 0x24, 4)

0005c830: ldmia r3,{r1,r4}
	(register, 0x80, 4) COPY (register, 0x2c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0005c834: sub r4,r4,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0005c838: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c83c: cpy r5,r0
	(register, 0x34, 4) COPY (register, 0x20, 4)

0005c840: cpy r7,r2
	(register, 0x3c, 4) COPY (register, 0x28, 4)

0005c844: cpy r8,r2
	(register, 0x40, 4) COPY (register, 0x28, 4)

0005c848: bgt 0x0005c884
	(unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
	 ---  CBRANCH (ram, 0x5c884, 4) , (unique, 0x2480, 1)

0005c84c: b 0x0005c858
	 ---  BRANCH (ram, 0x5c858, 4)

0005c850: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c854: bne 0x0005c8cc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x5c8cc, 4) , (unique, 0x1a80, 1)

0005c858: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c85c: beq 0x0005c8c4
	 ---  CBRANCH (ram, 0x5c8c4, 4) , (register, 0x61, 1)

0005c860: cpy r0,r5
	(register, 0x20, 4) COPY (register, 0x34, 4)

0005c864: bl 0x0005c6e0
	(register, 0x58, 4) COPY (const, 0x5c868, 4)
	 ---  CALL (ram, 0x5c6e0, 4)

0005c868: cmn r0,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x42600, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c86c: beq 0x0005c8fc
	 ---  CBRANCH (ram, 0x5c8fc, 4) , (register, 0x61, 1)

0005c870: ldr r3,[r5,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x5c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0005c874: ldmia r3,{r1,r4}
	(register, 0x80, 4) COPY (register, 0x2c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0005c878: sub r4,r4,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0005c87c: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c880: ble 0x0005c860
	(unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
	 ---  CBRANCH (ram, 0x5c860, 4) , (unique, 0x2600, 1)

0005c884: mov r4,r4, asr #0x2
	(unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x30, 4) COPY (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005c888: cmp r4,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x40, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x30, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c88c: cpycs r4,r8
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x5c890, 4) , (unique, 0x2680, 1)
	(register, 0x30, 4) COPY (register, 0x40, 4)

0005c890: cmp r4,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x14, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c894: ble 0x0005c850
	(unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
	 ---  CBRANCH (ram, 0x5c850, 4) , (unique, 0x2600, 1)

0005c898: cpy r2,r4
	(register, 0x28, 4) COPY (register, 0x30, 4)

0005c89c: cpy r0,r6
	(register, 0x20, 4) COPY (register, 0x38, 4)

0005c8a0: bl 0x00060650
	(register, 0x58, 4) COPY (const, 0x5c8a4, 4)
	 ---  CALL (ram, 0x60650, 4)

0005c8a4: ldr r2,[r5,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x5c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0005c8a8: sub r8,r8,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x30, 4)
	(register, 0x40, 4) INT_SUB (register, 0x40, 4) , (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)

0005c8ac: ldr r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0005c8b0: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c8b4: add r3,r3,r4, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0005c8b8: cpy r6,r0
	(register, 0x38, 4) COPY (register, 0x20, 4)

0005c8bc: str r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0005c8c0: bne 0x0005c860
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x5c860, 4) , (unique, 0x1a80, 1)

0005c8c4: cpy r0,r7
	(register, 0x20, 4) COPY (register, 0x3c, 4)

0005c8c8: ldmia sp!,{r4,r5,r6,r7,r8,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0005c8cc: cpy r2,r1
	(register, 0x28, 4) COPY (register, 0x24, 4)

0005c8d0: sub r0,r6,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x4, 4)
	(register, 0x20, 4) INT_SUB (register, 0x38, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0005c8d4: add lr,r1,r4, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

0005c8d8: ldr r12,[r2],#0x4
	(unique, 0x8800, 4) COPY (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

0005c8dc: cmp r2,lr
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x58, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x58, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0005c8e0: str r12,[r0,#0x4]!
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x20, 4) , (register, 0x50, 4)

0005c8e4: bne 0x0005c8d8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x5c8d8, 4) , (unique, 0x1a80, 1)

0005c8e8: add r1,r1,r4, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0005c8ec: str r1,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0005c8f0: add r6,r6,r4, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

0005c8f4: sub r8,r8,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x30, 4)
	(register, 0x40, 4) INT_SUB (register, 0x40, 4) , (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)

0005c8f8: b 0x0005c858
	 ---  BRANCH (ram, 0x5c858, 4)

0005c8fc: sub r7,r7,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

0005c900: cpy r0,r7
	(register, 0x20, 4) COPY (register, 0x3c, 4)

0005c904: ldmia sp!,{r4,r5,r6,r7,r8,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

