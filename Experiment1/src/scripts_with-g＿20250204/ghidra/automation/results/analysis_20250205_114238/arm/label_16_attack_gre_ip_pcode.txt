Label: 16
Function: attack_gre_ip
Architecture: arm
Source File: Unknown
Entry Point: 000151b0

P-code:

000151b0: stmdb sp!,{r4,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

000151b4: add r11,sp,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

000151b8: sub sp,sp,#0x6c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x6c, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

000151bc: str r1,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x24, 4)

000151c0: str r3,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000151c4: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000151c8: strb r3,[r11,#-0x5d]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa3, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

000151cc: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

000151d0: strb r3,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

000151d4: ldrb r3,[r11,#-0x5d]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa3, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000151d8: mov r1,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000151dc: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

000151e0: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x151e4, 4)
	 ---  CALL (ram, 0x26a60, 4)

000151e4: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000151e8: str r3,[r11,#-0x10]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000151ec: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

000151f0: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000151f4: mov r2,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000151f8: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000151fc: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x15200, 4)
	 ---  CALL (ram, 0x16a74, 4)

00015200: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015204: strb r3,[r11,#-0x11]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffef, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

00015208: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

0001520c: ldr r3,[0x15a00]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

00015210: mov r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015214: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015218: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x1521c, 4)
	 ---  CALL (ram, 0x16a74, 4)

0001521c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015220: strh r3,[r11,#-0x14]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9280, 4) , (unique, 0x70f00, 2)

00015224: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

00015228: mov r3,#0x40
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001522c: mov r2,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015230: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015234: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x15238, 4)
	 ---  CALL (ram, 0x16a74, 4)

00015238: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001523c: strb r3,[r11,#-0x15]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffeb, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

00015240: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

00015244: mov r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015248: mov r2,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001524c: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015250: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x15254, 4)
	 ---  CALL (ram, 0x16a74, 4)

00015254: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015258: strb r3,[r11,#-0x16]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffea, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

0001525c: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

00015260: ldr r3,[0x15a00]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

00015264: mov r2,#0x6
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015268: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001526c: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x15270, 4)
	 ---  CALL (ram, 0x16a74, 4)

00015270: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015274: strh r3,[r11,#-0x18]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9280, 4) , (unique, 0x70f00, 2)

00015278: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

0001527c: ldr r3,[0x15a00]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

00015280: mov r2,#0x7
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x7, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015284: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015288: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x1528c, 4)
	 ---  CALL (ram, 0x16a74, 4)

0001528c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015290: strh r3,[r11,#-0x1a]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9280, 4) , (unique, 0x70f00, 2)

00015294: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

00015298: mov r3,#0x200
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x200, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x200, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001529c: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152a0: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000152a4: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x152a8, 4)
	 ---  CALL (ram, 0x16a74, 4)

000152a8: str r0,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x20, 4)

000152ac: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

000152b0: mov r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152b4: mov r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152b8: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000152bc: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x152c0, 4)
	 ---  CALL (ram, 0x16a74, 4)

000152c0: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000152c4: strb r3,[r11,#-0x21]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdf, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

000152c8: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

000152cc: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152d0: mov r2,#0x13
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x13, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x13, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152d4: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000152d8: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x152dc, 4)
	 ---  CALL (ram, 0x16a74, 4)

000152dc: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000152e0: strb r3,[r11,#-0x22]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffde, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

000152e4: ldr r3,[0x15a04]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a04, 4)

000152e8: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000152ec: ldrb r0,[r11,#-0x5e]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

000152f0: mov r2,#0x19
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x19, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x19, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000152f4: ldr r1,[r11,#-0x68]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000152f8: bl 0x00016a74
	(register, 0x58, 4) COPY (const, 0x152fc, 4)
	 ---  CALL (ram, 0x16a74, 4)

000152fc: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015300: str r3,[r11,#-0x28]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

00015304: mov r2,#0x6
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015308: mov r1,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001530c: mov r0,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015310: bl 0x0002bbc0
	(register, 0x58, 4) COPY (const, 0x15314, 4)
	 ---  CALL (ram, 0x2bbc0, 4)

00015314: str r0,[r11,#-0x2c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x20, 4)

00015318: ldr r3,[r11,#-0x2c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001531c: cmn r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x42600, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015320: beq 0x000159f4
	 ---  CBRANCH (ram, 0x159f4, 4) , (register, 0x61, 1)

00015324: mov r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015328: str r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

0001532c: sub r3,r11,#0x58
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x58, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x58, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x58, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x4c, 4) , (const, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015330: mov r2,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015334: str r2,[sp,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00015338: mov r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001533c: mov r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015340: ldr r0,[r11,#-0x2c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015344: bl 0x0002bb70
	(register, 0x58, 4) COPY (const, 0x15348, 4)
	 ---  CALL (ram, 0x2bb70, 4)

00015348: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001534c: cmn r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x42600, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015350: bne 0x00015360
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x15360, 4) , (unique, 0x1a80, 1)

00015354: ldr r0,[r11,#-0x2c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015358: bl 0x0002991c
	(register, 0x58, 4) COPY (const, 0x1535c, 4)
	 ---  CALL (ram, 0x2991c, 4)

0001535c: b 0x000159f8
	 ---  BRANCH (ram, 0x159f8, 4)

00015360: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015364: str r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

00015368: b 0x00015660
	 ---  BRANCH (ram, 0x15660, 4)

0001536c: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015370: mov r3,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015374: ldr r2,[r11,#-0x10]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015378: add r4,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x30, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0001537c: mov r1,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015380: ldr r0,[0x15a08]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a08, 4)

00015384: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x15388, 4)
	 ---  CALL (ram, 0x26a60, 4)

00015388: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001538c: str r3,[r4,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00015390: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015394: mov r3,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015398: ldr r2,[r11,#-0x10]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001539c: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153a0: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000153a4: str r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000153a8: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153ac: add r3,r3,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153b0: str r3,[r11,#-0x4c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000153b4: ldr r3,[r11,#-0x4c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153b8: add r3,r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153bc: str r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000153c0: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153c4: add r3,r3,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153c8: str r3,[r11,#-0x54]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffac, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000153cc: ldr r2,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153d0: ldrb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000153d4: bic r3,r3,#0xb0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xb0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0xb0, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153d8: orr r3,r3,#0x40
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x40, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153dc: strb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

000153e0: ldr r2,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153e4: ldrb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000153e8: bic r3,r3,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0xa, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153ec: orr r3,r3,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x5, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000153f0: strb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

000153f4: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000153f8: ldrb r2,[r11,#-0x11]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffef, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

000153fc: strb r2,[r3,#0x1]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015400: ldr r3,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015404: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015408: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001540c: add r3,r3,#0x34
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015410: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015414: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015418: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0001541c: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15420, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015420: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015424: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015428: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001542c: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015430: ldrh r3,[r11,#-0x14]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

00015434: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00015438: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x1543c, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

0001543c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015440: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015444: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015448: strh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

0001544c: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015450: ldrb r2,[r11,#-0x15]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffeb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00015454: strb r2,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015458: ldrb r3,[r11,#-0x16]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffea, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0001545c: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015460: beq 0x0001547c
	 ---  CBRANCH (ram, 0x1547c, 4) , (register, 0x61, 1)

00015464: mov r0,#0x4000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015468: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x1546c, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

0001546c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015470: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015474: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015478: strh r2,[r3,#0x6]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

0001547c: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015480: mov r2,#0x2f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x2f, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015484: strb r2,[r3,#0x9]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x9, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015488: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001548c: ldr r2,[r11,#-0x28]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015490: str r2,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00015494: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015498: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

0001549c: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

000154a0: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000154a4: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000154a8: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000154ac: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000154b0: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000154b4: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000154b8: ldr r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000154bc: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000154c0: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

000154c4: mov r0,#0x800
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x800, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xb, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xb, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x800, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000154c8: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x154cc, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

000154cc: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000154d0: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000154d4: ldr r3,[r11,#-0x4c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000154d8: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000154dc: ldr r2,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000154e0: ldrb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000154e4: bic r3,r3,#0xb0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xb0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0xb0, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000154e8: orr r3,r3,#0x40
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x40, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000154ec: strb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

000154f0: ldr r2,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000154f4: ldrb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000154f8: bic r3,r3,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0xa, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000154fc: orr r3,r3,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (const, 0x5, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015500: strb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015504: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015508: ldrb r2,[r11,#-0x11]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffef, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

0001550c: strb r2,[r3,#0x1]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015510: ldr r3,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015514: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015518: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001551c: add r3,r3,#0x1c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015520: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015524: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015528: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0001552c: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15530, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015530: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015534: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015538: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001553c: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015540: ldrh r3,[r11,#-0x14]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

00015544: mvn r3,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_NEGATE (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015548: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001554c: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015550: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00015554: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15558, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015558: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001555c: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015560: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015564: strh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015568: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001556c: ldrb r2,[r11,#-0x15]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffeb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00015570: strb r2,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00015574: ldrb r3,[r11,#-0x16]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffea, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00015578: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001557c: beq 0x00015598
	 ---  CBRANCH (ram, 0x15598, 4) , (register, 0x61, 1)

00015580: mov r0,#0x4000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015584: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15588, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015588: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001558c: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015590: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015594: strh r2,[r3,#0x6]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015598: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001559c: mov r2,#0x11
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x11, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x11, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000155a0: strb r2,[r3,#0x9]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x9, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

000155a4: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x155a8, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000155a8: cpy r2,r0
	(register, 0x28, 4) COPY (register, 0x20, 4)

000155ac: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000155b0: str r2,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

000155b4: ldrb r3,[r11,#-0x22]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffde, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000155b8: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000155bc: beq 0x000155d4
	 ---  CBRANCH (ram, 0x155d4, 4) , (register, 0x61, 1)

000155c0: ldr r3,[r11,#-0x48]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000155c4: ldr r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000155c8: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000155cc: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

000155d0: b 0x000155ec
	 ---  BRANCH (ram, 0x155ec, 4)

000155d4: ldr r3,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000155d8: ldr r3,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000155dc: rsb r3,r3,#0x3fc
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3fc, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x3fc, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x3fc, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_SUB (const, 0x3fc, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000155e0: add r3,r3,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000155e4: ldr r2,[r11,#-0x50]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffb0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000155e8: str r3,[r2,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000155ec: ldrh r3,[r11,#-0x18]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

000155f0: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

000155f4: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x155f8, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

000155f8: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000155fc: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015600: ldr r3,[r11,#-0x54]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffac, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015604: strh r2,[r3,#0x0]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015608: ldrh r3,[r11,#-0x1a]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

0001560c: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00015610: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15614, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015614: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015618: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

0001561c: ldr r3,[r11,#-0x54]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffac, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015620: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015624: ldr r3,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015628: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001562c: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015630: add r3,r3,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015634: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015638: mov r3,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001563c: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00015640: bl 0x0002bbf4
	(register, 0x58, 4) COPY (const, 0x15644, 4)
	 ---  CALL (ram, 0x2bbf4, 4)

00015644: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015648: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

0001564c: ldr r3,[r11,#-0x54]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffac, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015650: strh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015654: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015658: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001565c: str r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

00015660: ldrb r2,[r11,#-0x5d]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa3, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00015664: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015668: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001566c: bgt 0x0001536c
	(unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
	 ---  CBRANCH (ram, 0x1536c, 4) , (unique, 0x2480, 1)

00015670: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015674: str r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

00015678: b 0x000159e0
	 ---  BRANCH (ram, 0x159e0, 4)

0001567c: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015680: mov r3,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015684: ldr r2,[r11,#-0x10]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffff0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015688: add r3,r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001568c: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00015690: str r3,[r11,#-0x30]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

00015694: ldr r3,[r11,#-0x30]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015698: str r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

0001569c: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156a0: add r3,r3,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156a4: str r3,[r11,#-0x38]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000156a8: ldr r3,[r11,#-0x38]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156ac: add r3,r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156b0: str r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000156b4: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156b8: add r3,r3,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156bc: str r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000156c0: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156c4: add r3,r3,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156c8: str r3,[r11,#-0x44]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000156cc: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156d0: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000156d4: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

000156d8: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000156dc: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156e0: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000156e4: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000156e8: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000156ec: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000156f0: ldrb r3,[r3,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000156f4: cmp r3,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1f, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000156f8: bhi 0x0001577c
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x1577c, 4) , (unique, 0x1f00, 1)

000156fc: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015700: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015704: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

00015708: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001570c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015710: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015714: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015718: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001571c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015720: ldr r3,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00015724: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00015728: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x1572c, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

0001572c: cpy r4,r0
	(register, 0x30, 4) COPY (register, 0x20, 4)

00015730: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x15734, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00015734: cpy r2,r0
	(register, 0x28, 4) COPY (register, 0x20, 4)

00015738: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001573c: cpy r1,r3
	(register, 0x24, 4) COPY (register, 0x2c, 4)

00015740: cpy r3,r1
	(register, 0x2c, 4) COPY (register, 0x24, 4)

00015744: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015748: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001574c: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015750: cpy r1,r3
	(register, 0x24, 4) COPY (register, 0x2c, 4)

00015754: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015758: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0001575c: ldrb r3,[r3,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00015760: mov r3,r2, lsr r3
	(unique, 0x5180, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x5180, 4)
	(register, 0x2c, 4) COPY (unique, 0x5780, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015764: add r3,r4,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x30, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015768: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0001576c: bl 0x0002bbe0
	(register, 0x58, 4) COPY (const, 0x15770, 4)
	 ---  CALL (ram, 0x2bbe0, 4)

00015770: cpy r2,r0
	(register, 0x28, 4) COPY (register, 0x20, 4)

00015774: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015778: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0001577c: ldr r3,[r11,#-0x28]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015780: cmn r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x42600, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015784: bne 0x00015798
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x15798, 4) , (unique, 0x1a80, 1)

00015788: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1578c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001578c: cpy r2,r0
	(register, 0x28, 4) COPY (register, 0x20, 4)

00015790: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015794: str r2,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00015798: ldrh r3,[r11,#-0x14]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffec, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

0001579c: ldr r2,[0x15a00]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

000157a0: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000157a4: bne 0x000157e0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x157e0, 4) , (unique, 0x1a80, 1)

000157a8: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x157ac, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000157ac: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000157b0: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000157b4: mov r2,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000157b8: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000157bc: strh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000157c0: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000157c4: ldrh r3,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

000157c8: rsb r3,r3,#0x3e4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3e4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x3e4, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x3e4, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_SUB (const, 0x3e4, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000157cc: add r3,r3,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000157d0: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000157d4: mov r2,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000157d8: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000157dc: strh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000157e0: ldrh r3,[r11,#-0x18]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

000157e4: ldr r2,[0x15a00]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

000157e8: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000157ec: bne 0x00015808
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x15808, 4) , (unique, 0x1a80, 1)

000157f0: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x157f4, 4)
	 ---  CALL (ram, 0x1cb48, 4)

000157f4: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000157f8: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000157fc: mov r2,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015800: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015804: strh r2,[r3,#0x0]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015808: ldrh r3,[r11,#-0x1a]
	(unique, 0x9280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe6, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x44100, 2)

0001580c: ldr r2,[0x15a00]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x15a00, 4)

00015810: cmp r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015814: bne 0x00015830
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x15830, 4) , (unique, 0x1a80, 1)

00015818: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x1581c, 4)
	 ---  CALL (ram, 0x1cb48, 4)

0001581c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015820: mov r3,r3, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015824: mov r2,r3, lsr #0x10
	(unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015828: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001582c: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015830: ldrb r3,[r11,#-0x22]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffde, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00015834: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015838: bne 0x00015850
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x15850, 4) , (unique, 0x1a80, 1)

0001583c: bl 0x0001cb48
	(register, 0x58, 4) COPY (const, 0x15840, 4)
	 ---  CALL (ram, 0x1cb48, 4)

00015840: cpy r2,r0
	(register, 0x28, 4) COPY (register, 0x20, 4)

00015844: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015848: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0001584c: b 0x00015860
	 ---  BRANCH (ram, 0x15860, 4)

00015850: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015854: ldr r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00015858: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001585c: str r2,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00015860: ldrb r3,[r11,#-0x21]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffdf, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00015864: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00015868: beq 0x00015878
	 ---  CBRANCH (ram, 0x15878, 4) , (register, 0x61, 1)

0001586c: ldr r1,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015870: ldr r0,[r11,#-0x44]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffbc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015874: bl 0x0001cc18
	(register, 0x58, 4) COPY (const, 0x15878, 4)
	 ---  CALL (ram, 0x1cc18, 4)

00015878: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001587c: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015880: strh r2,[r3,#0xa]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015884: mov r1,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015888: ldr r0,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001588c: bl 0x0001a314
	(register, 0x58, 4) COPY (const, 0x15890, 4)
	 ---  CALL (ram, 0x1a314, 4)

00015890: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00015894: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015898: ldr r3,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001589c: strh r2,[r3,#0xa]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000158a0: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158a4: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000158a8: strh r2,[r3,#0xa]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000158ac: mov r1,#0x14
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x14, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000158b0: ldr r0,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158b4: bl 0x0001a314
	(register, 0x58, 4) COPY (const, 0x158b8, 4)
	 ---  CALL (ram, 0x1a314, 4)

000158b8: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000158bc: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000158c0: ldr r3,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158c4: strh r2,[r3,#0xa]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000158c8: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158cc: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000158d0: strh r2,[r3,#0x6]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

000158d4: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158d8: ldrh r2,[r3,#0x4]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x44100, 2)

000158dc: ldr r3,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158e0: add r3,r3,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000158e4: ldr r1,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158e8: ldr r0,[r11,#-0x3c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158ec: bl 0x0001a3b4
	(register, 0x58, 4) COPY (const, 0x158f0, 4)
	 ---  CALL (ram, 0x1a3b4, 4)

000158f0: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

000158f4: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

000158f8: ldr r3,[r11,#-0x40]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffc0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000158fc: strh r2,[r3,#0x6]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015900: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015904: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015908: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

0001590c: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015910: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015914: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015918: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

0001591c: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015920: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015924: mov r2,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015928: strh r2,[r3,#0x0]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

0001592c: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015930: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015934: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

00015938: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001593c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015940: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015944: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015948: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001594c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015950: ldr r2,[r11,#-0x34]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffcc, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015954: ldr r2,[r2,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x10, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00015958: str r2,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0001595c: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015960: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015964: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

00015968: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001596c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015970: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015974: cpy r2,r3
	(register, 0x28, 4) COPY (register, 0x2c, 4)

00015978: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001597c: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00015980: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00015984: strh r2,[r3,#0x2]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x70f00, 2) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x70f00, 2)

00015988: ldr r3,[r11,#-0x20]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

0001598c: add r2,r3,#0x34
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00015990: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

00015994: cpy r1,r3
	(register, 0x24, 4) COPY (register, 0x2c, 4)

00015998: cpy r3,r1
	(register, 0x2c, 4) COPY (register, 0x24, 4)

0001599c: mov r3,r3, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000159a0: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000159a4: mov r3,r3, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000159a8: cpy r1,r3
	(register, 0x24, 4) COPY (register, 0x2c, 4)

000159ac: ldr r3,[r11,#-0x64]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff9c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000159b0: add r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000159b4: cpy r1,r3
	(register, 0x24, 4) COPY (register, 0x2c, 4)

000159b8: mov r3,#0x10
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000159bc: str r3,[sp,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000159c0: str r1,[sp,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

000159c4: mov r3,#0x4000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x4000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000159c8: ldr r1,[r11,#-0x30]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000159cc: ldr r0,[r11,#-0x2c]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffd4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000159d0: bl 0x0002ba8c
	(register, 0x58, 4) COPY (const, 0x159d4, 4)
	 ---  CALL (ram, 0x2ba8c, 4)

000159d4: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000159d8: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000159dc: str r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)

000159e0: ldrb r2,[r11,#-0x5d]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa3, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

000159e4: ldr r3,[r11,#-0x58]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000159e8: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000159ec: bgt 0x0001567c
	(unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
	(unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
	 ---  CBRANCH (ram, 0x1567c, 4) , (unique, 0x2480, 1)

000159f0: b 0x00015670
	 ---  BRANCH (ram, 0x15670, 4)

000159f4: cpy r0,r0
	(register, 0x20, 4) COPY (register, 0x20, 4)

000159f8: sub sp,r11,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x54, 4) INT_SUB (register, 0x4c, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

000159fc: ldmia sp!,{r4,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

