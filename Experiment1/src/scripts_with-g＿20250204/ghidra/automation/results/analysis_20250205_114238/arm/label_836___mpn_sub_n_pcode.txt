Label: 836
Function: __mpn_sub_n
Architecture: arm
Source File: Unknown
Entry Point: 00065af0

P-code:

00065af0: stmdb sp!,{r4,r5,r6,r7,r8,r10,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00065af4: cmp r0,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x20, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x20, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065af8: tst r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065afc: add lr,r1,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x24, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00065b00: beq 0x00065b1c
	 ---  CBRANCH (ram, 0x65b1c, 4) , (register, 0x61, 1)

00065b04: ldr r4,[r1],#0x4
	(unique, 0x8800, 4) COPY (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

00065b08: ldr r5,[r2],#0x4
	(unique, 0x8800, 4) COPY (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

00065b0c: sbcs r4,r4,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x30, 4) , (register, 0x34, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x34, 4) , (register, 0x30, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x34, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x34, 4) , (unique, 0x59b80, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b10: teq r1,lr
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x73b00, 4) INT_XOR (register, 0x24, 4) , (register, 0x58, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b14: str r4,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x30, 4)

00065b18: beq 0x00065b64
	 ---  CBRANCH (ram, 0x65b64, 4) , (register, 0x61, 1)

00065b1c: tst r3,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b20: beq 0x00065b40
	 ---  CBRANCH (ram, 0x65b40, 4) , (register, 0x61, 1)

00065b24: ldmia r1!,{r4,r5}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (register, 0x80, 4)

00065b28: ldmia r2!,{r6,r7}
	(register, 0x80, 4) COPY (register, 0x28, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x28, 4) COPY (register, 0x80, 4)

00065b2c: sbcs r4,r4,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x30, 4) , (register, 0x38, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x38, 4) , (register, 0x30, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x38, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x38, 4) , (unique, 0x59b80, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b30: sbcs r5,r5,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x34, 4) , (register, 0x3c, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x3c, 4) , (register, 0x34, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x3c, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x3c, 4) , (unique, 0x59b80, 4)
	(register, 0x34, 4) INT_SUB (register, 0x34, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b34: teq r1,lr
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x73b00, 4) INT_XOR (register, 0x24, 4) , (register, 0x58, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b38: stmia r0!,{r4,r5}
	(register, 0x80, 4) COPY (register, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x20, 4) COPY (register, 0x80, 4)

00065b3c: beq 0x00065b64
	 ---  CBRANCH (ram, 0x65b64, 4) , (register, 0x61, 1)

00065b40: ldmia r1!,{r3,r5,r7,r10}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (register, 0x80, 4)

00065b44: ldmia r2!,{r4,r6,r8,r12}
	(register, 0x80, 4) COPY (register, 0x28, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x28, 4) COPY (register, 0x80, 4)

00065b48: sbcs r3,r3,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x2c, 4) , (register, 0x30, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x30, 4) , (register, 0x2c, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x30, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x30, 4) , (unique, 0x59b80, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b4c: sbcs r5,r5,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x34, 4) , (register, 0x38, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x38, 4) , (register, 0x34, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x38, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x38, 4) , (unique, 0x59b80, 4)
	(register, 0x34, 4) INT_SUB (register, 0x34, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b50: sbcs r7,r7,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x3c, 4) , (register, 0x40, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x40, 4) , (register, 0x3c, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x40, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x40, 4) , (unique, 0x59b80, 4)
	(register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b54: sbcs r10,r10,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x48, 4) , (register, 0x50, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x50, 4) , (register, 0x48, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x48, 4) , (register, 0x50, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x50, 4) , (unique, 0x59b80, 4)
	(register, 0x48, 4) INT_SUB (register, 0x48, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b58: teq r1,lr
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x73b00, 4) INT_XOR (register, 0x24, 4) , (register, 0x58, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x73b00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00065b5c: stmia r0!,{r3,r5,r7,r10}
	(register, 0x80, 4) COPY (register, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x20, 4) COPY (register, 0x80, 4)

00065b60: bne 0x00065b40
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x65b40, 4) , (unique, 0x1a80, 1)

00065b64: sbc r0,r0,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x3f380, 4) INT_SUB (register, 0x20, 4) , (register, 0x20, 4)
	(unique, 0x3f400, 1) INT_LESS (register, 0x20, 4) , (register, 0x20, 4)
	(unique, 0x3f480, 4) INT_ZEXT (register, 0x62, 1)
	(unique, 0x3f500, 1) INT_LESS (unique, 0x3f380, 4) , (unique, 0x3f480, 4)
	(register, 0x66, 1) BOOL_OR (unique, 0x3f400, 1) , (unique, 0x3f500, 1)
	(unique, 0x3f600, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x20, 4)
	(unique, 0x3f680, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x3f700, 4) INT_ZEXT (unique, 0x3f680, 1)
	(unique, 0x3f780, 1) INT_SBORROW (unique, 0x3f380, 4) , (unique, 0x3f700, 4)
	(register, 0x67, 1) BOOL_XOR (unique, 0x3f600, 1) , (unique, 0x3f780, 1)
	(unique, 0x59b00, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x59b80, 4) INT_ZEXT (unique, 0x59b00, 1)
	(unique, 0x59c00, 4) INT_ADD (register, 0x20, 4) , (unique, 0x59b80, 4)
	(register, 0x20, 4) INT_SUB (register, 0x20, 4) , (unique, 0x59c00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00065b68: rsb r0,r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_SUB (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00065b6c: ldmia sp!,{r4,r5,r6,r7,r8,r10,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

