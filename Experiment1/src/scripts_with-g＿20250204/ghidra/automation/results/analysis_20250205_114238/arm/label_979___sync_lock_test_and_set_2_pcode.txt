Label: 979
Function: __sync_lock_test_and_set_2
Architecture: arm
Source File: Unknown
Entry Point: 0006ed2c

P-code:

0006ed2c: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006ed30: ldr r5,[0x6ed84]
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x6ed84, 4)

0006ed34: bic r8,r0,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0x3, 4)
	(register, 0x40, 4) INT_AND (register, 0x20, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)

0006ed38: mov r0,r0, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x20, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed3c: and r4,r0,#0x18
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x30, 4) INT_AND (register, 0x20, 4) , (const, 0x18, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0006ed40: ldr r9,[0x6ed88]
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (const, 0x6ed88, 4)

0006ed44: mov r5,r5, lsl r4
	(unique, 0x4a80, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
	(unique, 0x4b80, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x4b00, 4)
	(unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
	(unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
	(unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
	(unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
	(unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
	(unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
	(unique, 0x5080, 4) INT_LEFT (register, 0x34, 4) , (unique, 0x4a80, 4)
	(register, 0x34, 4) COPY (unique, 0x5080, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed48: mov r7,r1, lsl r4
	(unique, 0x4a80, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
	(unique, 0x4b80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x4b00, 4)
	(unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
	(unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
	(unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
	(unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
	(unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
	(unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
	(unique, 0x5080, 4) INT_LEFT (register, 0x24, 4) , (unique, 0x4a80, 4)
	(register, 0x3c, 4) COPY (unique, 0x5080, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed4c: ldr r6,[r8,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006ed50: cpy r2,r8
	(register, 0x28, 4) COPY (register, 0x40, 4)

0006ed54: eor r1,r7,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_XOR (register, 0x3c, 4) , (register, 0x38, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ed58: and r1,r1,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_AND (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ed5c: cpy r0,r6
	(register, 0x20, 4) COPY (register, 0x38, 4)

0006ed60: eor r1,r1,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_XOR (register, 0x24, 4) , (register, 0x38, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006ed64: blx r9
	(unique, 0x0, 4) INT_AND (register, 0x44, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x44, 4) , (const, 0xfffffffe, 4)
	(register, 0x58, 4) COPY (const, 0x6ed68, 4)
	 ---  CALLIND (register, 0x5c, 4)

0006ed68: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006ed6c: bne 0x0006ed4c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6ed4c, 4) , (unique, 0x1a80, 1)

0006ed70: and r0,r5,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) INT_AND (register, 0x34, 4) , (register, 0x38, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

0006ed74: mov r0,r0, lsr r4
	(unique, 0x5180, 4) INT_AND (register, 0x30, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5180, 4)
	(register, 0x20, 4) COPY (unique, 0x5780, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed78: mov r0,r0, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x10, 4)
	(register, 0x20, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed7c: mov r0,r0, asr #0x10
	(unique, 0x3e00, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x20, 4) , (const, 0x10, 4)
	(register, 0x20, 4) COPY (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006ed80: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

