Label: 653
Function: __longjmp
Architecture: arm
Source File: Unknown
Entry Point: 00056c50

P-code:

00056c50: cpy r12,r0
	(register, 0x50, 4) COPY (register, 0x20, 4)

00056c54: ldr r3,[r12],#0x4
	(unique, 0x8800, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

00056c58: ldr r4,[0x56cc4]
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (const, 0x56cc4, 4)

00056c5c: ldr r2,[pc,r4]
	(unique, 0x1780, 4) INT_ADD (const, 0x56c5c, 4) , (const, 0x8, 4)
	(unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x30, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00056c60: eor r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_XOR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00056c64: ldr r4,[r12],#0x4
	(unique, 0x8800, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

00056c68: eor r4,r4,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x30, 4) INT_XOR (register, 0x30, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00056c6c: cpy sp,r3
	(register, 0x54, 4) COPY (register, 0x2c, 4)

00056c70: cpy lr,r4
	(register, 0x58, 4) COPY (register, 0x30, 4)

00056c74: ldmia r12!,{r4,r5,r6,r7,r8,r9,r10,r11}
	(register, 0x80, 4) COPY (register, 0x50, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x50, 4) COPY (register, 0x80, 4)

00056c78: ldr r2,[0x56cc8]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x56cc8, 4)

00056c7c: ldr r3,[0x56ccc]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x56ccc, 4)

00056c80: add r2,r2,pc
	(unique, 0x1880, 4) INT_ADD (const, 0x56c80, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x1880, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x1880, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x1880, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00056c84: ldr r2,[r2,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00056c88: ldr r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00056c8c: tst r3,#0x40
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x40, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00056c90: beq 0x00056c98
	 ---  CBRANCH (ram, 0x56c98, 4) , (register, 0x61, 1)

00056c94: vldmia r12!,{d8,d9,d10,d11,d12,d13,d14,d15}
	(register, 0x80, 4) COPY (register, 0x50, 4)
	(register, 0x340, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x348, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x350, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x358, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x360, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x368, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x370, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(register, 0x378, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
	(unique, 0x20a00, 4) INT_LEFT (const, 0x10, 4) , (const, 0x2, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (unique, 0x20a00, 4)

00056c98: tst r3,#0x200
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x200, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x200, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00056c9c: beq 0x00056cb8
	 ---  CBRANCH (ram, 0x56cb8, 4) , (register, 0x61, 1)

00056ca0: ldcl p1,cr10,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x228, 4) , (unique, 0x10680, 4)

00056ca4: ldcl p1,cr11,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x22c, 4) , (unique, 0x10680, 4)

00056ca8: ldcl p1,cr12,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x230, 4) , (unique, 0x10680, 4)

00056cac: ldcl p1,cr13,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x234, 4) , (unique, 0x10680, 4)

00056cb0: ldcl p1,cr14,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x238, 4) , (unique, 0x10680, 4)

00056cb4: ldcl p1,cr15,[r12],#0x8
	(unique, 0x10680, 4) COPY (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
	 ---  CALLOTHER (const, 0x4, 4) , (const, 0x1, 4) , (register, 0x23c, 4) , (unique, 0x10680, 4)

00056cb8: movs r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x20, 4) COPY (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00056cbc: moveq r0,#0x1
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x56cc0, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00056cc0: bx lr
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

