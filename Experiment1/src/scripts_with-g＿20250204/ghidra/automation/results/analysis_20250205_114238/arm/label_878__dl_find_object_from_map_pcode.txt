Label: 878
Function: _dl_find_object_from_map
Architecture: arm
Source File: Unknown
Entry Point: 0006a4b8

P-code:

0006a4b8: ldr r3,[r0,#0x1c4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x1c4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a4bc: str r3,[r1,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006a4c0: ldr r3,[r0,#0x1c8]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x1c8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a4c4: str r3,[r1,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006a4c8: str r0,[r1,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006a4cc: add r2,r0,#0x168
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x168, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x168, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x168, 4)
	(register, 0x28, 4) INT_ADD (register, 0x20, 4) , (const, 0x168, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006a4d0: ldr r3,[r0,#0x160]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x160, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a4d4: ldrh r12,[r2,#0x0]
	(unique, 0x9180, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x50, 4) INT_ZEXT (unique, 0x44100, 2)

0006a4d8: add r12,r3,r12, lsl #0x5
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x5, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x5, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x50, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006a4dc: cmp r3,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006a4e0: bcc 0x0006a4f4
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x6a4f4, 4) , (unique, 0x1b80, 1)

0006a4e4: b 0x0006a520
	 ---  BRANCH (ram, 0x6a520, 4)

0006a4e8: add r3,r3,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006a4ec: cmp r12,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x50, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006a4f0: bls 0x0006a520
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6a520, 4) , (unique, 0x2080, 1)

0006a4f4: ldr r2,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a4f8: cmp r2,#0x70000001
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x70000001, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x2, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x2, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x70000001, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x70000001, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x70000001, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006a4fc: bne 0x0006a4e8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6a4e8, 4) , (unique, 0x1a80, 1)

0006a500: ldr r2,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a504: ldr r0,[r0,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a508: add r2,r2,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x20, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006a50c: str r2,[r1,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006a510: ldr r3,[r3,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006a514: mov r3,r3, lsr #0x3
	(unique, 0x3800, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006a518: str r3,[r1,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006a51c: bx lr
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0006a520: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006a524: str r3,[r1,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006a528: str r3,[r1,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006a52c: bx lr
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

