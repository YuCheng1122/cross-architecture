Label: 821
Function: _nl_intern_locale_data
Architecture: arm
Source File: Unknown
Entry Point: 00063cc4

P-code:

00063cc4: cmp r2,#0x7
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x7, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x7, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x7, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063cc8: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00063ccc: bls 0x000641d4
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x641d4, 4) , (unique, 0x2080, 1)

00063cd0: cmp r0,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x3, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063cd4: cpy r7,r2
	(register, 0x3c, 4) COPY (register, 0x28, 4)

00063cd8: cpy r6,r0
	(register, 0x38, 4) COPY (register, 0x20, 4)

00063cdc: cpy r5,r1
	(register, 0x34, 4) COPY (register, 0x24, 4)

00063ce0: ldr r2,[r1,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063ce4: beq 0x000641ec
	 ---  CBRANCH (ram, 0x641ec, 4) , (register, 0x61, 1)

00063ce8: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063cec: beq 0x00063da8
	 ---  CBRANCH (ram, 0x63da8, 4) , (register, 0x61, 1)

00063cf0: ldr r3,[0x642fc]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x642fc, 4)

00063cf4: eor r3,r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_XOR (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063cf8: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063cfc: bne 0x000641d4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x641d4, 4) , (unique, 0x1a80, 1)

00063d00: ldr r3,[0x64300]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x64300, 4)

00063d04: ldr r8,[r5,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063d08: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x63d08, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063d0c: ldr r3,[r3,r6,lsl #0x2]
	(unique, 0x7800, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x7800, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063d10: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d14: bcc 0x000641d4
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x641d4, 4) , (unique, 0x1b80, 1)

00063d18: add r3,r8,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x2, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x40, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063d1c: cmp r7,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x3580, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (unique, 0x3580, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d20: mov r3,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063d24: bls 0x000641d4
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x641d4, 4) , (unique, 0x2080, 1)

00063d28: clz r0,r6
	(register, 0x20, 4) LZCOUNT (register, 0x38, 4)

00063d2c: add r9,r3,#0x18
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x18, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x18, 4)
	(register, 0x44, 4) INT_ADD (register, 0x2c, 4) , (const, 0x18, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

00063d30: mov r0,r0, lsr #0x5
	(unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x20, 4) , (const, 0x5, 4)
	(register, 0x20, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063d34: add r0,r9,r0, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00063d38: bl 0x000257d4
	(register, 0x58, 4) COPY (const, 0x63d3c, 4)
	 ---  CALL (ram, 0x257d4, 4)

00063d3c: subs r4,r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d40: beq 0x00063f9c
	 ---  CBRANCH (ram, 0x63f9c, 4) , (register, 0x61, 1)

00063d44: cmp r6,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d48: stmib r4,{r5,r7}
	(register, 0x80, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00063d4c: beq 0x000641f4
	 ---  CBRANCH (ram, 0x641f4, 4) , (register, 0x61, 1)

00063d50: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063d54: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d58: str r8,[r4,#0x1c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00063d5c: str r3,[r4,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00063d60: str r3,[r4,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00063d64: str r3,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00063d68: beq 0x00063fa0
	 ---  CBRANCH (ram, 0x63fa0, 4) , (register, 0x61, 1)

00063d6c: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063d70: add r1,r5,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x24, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00063d74: ldr r5,[0x64304]
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x64304, 4)

00063d78: add r0,r4,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00063d7c: add r5,pc,r5
	(unique, 0x1780, 4) INT_ADD (const, 0x63d7c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x34, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00063d80: sub r2,r6,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_SUB (register, 0x38, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00063d84: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063d88: cmp r12,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x3c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d8c: bhi 0x00063f80
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1f00, 1)

00063d90: cmp r2,#0xb
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xb, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xb, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0xb, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0xb, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063d94: bhi 0x0006422c
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x6422c, 4) , (unique, 0x1f00, 1)

00063d98: add lr,r2,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x28, 4)
	(register, 0x58, 4) INT_ADD (register, 0x28, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063d9c: ldrh lr,[r5,lr]
	(unique, 0x9380, 4) INT_ADD (register, 0x34, 4) , (register, 0x58, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9380, 4)
	(register, 0x58, 4) INT_ZEXT (unique, 0x44100, 2)

00063da0: add pc,pc,lr, lsl #0x2
	(unique, 0x1780, 4) INT_ADD (const, 0x63da0, 4) , (const, 0x8, 4)
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x58, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (unique, 0x3580, 4)
	(unique, 0x40780, 4) INT_ADD (unique, 0x1780, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x40780, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x40780, 4) , (const, 0x0, 4)
	(unique, 0x0, 4) INT_AND (unique, 0x40780, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (unique, 0x40780, 4) , (const, 0xfffffffe, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

00063da8: ldr r3,[0x64308]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x64308, 4)

00063dac: b 0x00063cf8
	 ---  BRANCH (ram, 0x63cf8, 4)

00063db0: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063db4: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00063db8: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063dbc: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063dc0: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063dc4: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063dc8: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063dcc: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00063dd0: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063dd4: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063dd8: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00063ddc: cmp r3,#0xf
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xf, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0xf, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0xf, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063de0: bhi 0x00063f80
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1f00, 1)

00063de4: ldr lr,[0x6430c]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x6430c, 4)

00063de8: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63de8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063dec: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063df0: ldr lr,[lr,#0x2bc]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x2bc, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063df4: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063df8: beq 0x00063db0
	 ---  CBRANCH (ram, 0x63db0, 4) , (register, 0x61, 1)

00063dfc: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063e00: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063e04: add r12,lr,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

00063e08: cmp r3,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x40, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e0c: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063e10: bcc 0x00063d84
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63d84, 4) , (unique, 0x1b80, 1)

00063e14: cmp r6,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e18: bne 0x00063fa0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63fa0, 4) , (unique, 0x1a80, 1)

00063e1c: mov r5,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x34, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063e20: ldr r8,[r4,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063e24: mov r2,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063e28: mov r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063e2c: add r0,r8,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x5, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x5, 4)
	(register, 0x20, 4) INT_ADD (register, 0x40, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00063e30: bl 0x00028180
	(register, 0x58, 4) COPY (const, 0x63e34, 4)
	 ---  CALL (ram, 0x28180, 4)

00063e34: mov r6,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x38, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063e38: cpy r7,r5
	(register, 0x3c, 4) COPY (register, 0x34, 4)

00063e3c: add r10,r4,#0xc0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0xc0, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0xc0, 4)
	(register, 0x48, 4) INT_ADD (register, 0x30, 4) , (const, 0xc0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

00063e40: add r9,r8,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x4, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x4, 4)
	(register, 0x44, 4) INT_ADD (register, 0x40, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

00063e44: ldr r0,[r10,#0x4]!
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x48, 4)

00063e48: add r3,r5,#0x30
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x30, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x30, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x30, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (const, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063e4c: ldrb r2,[r0,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00063e50: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e54: beq 0x00064264
	 ---  CBRANCH (ram, 0x64264, 4) , (register, 0x61, 1)

00063e58: strb r6,[r8,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x4, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00063e5c: bl 0x000282c0
	(register, 0x58, 4) COPY (const, 0x63e60, 4)
	 ---  CALL (ram, 0x282c0, 4)

00063e60: and r0,r0,#0xff
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00063e64: cmp r5,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e68: strb r0,[r9,#0x1]!
	(register, 0x44, 4) INT_ADD (register, 0x44, 4) , (const, 0x1, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x20, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x44, 4) , (unique, 0x70d00, 1)

00063e6c: moveq r5,#0x1
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e70, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x34, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063e70: strbeq r0,[r8,#0xf]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e74, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0xf, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x20, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00063e74: beq 0x00063e44
	 ---  CBRANCH (ram, 0x63e44, 4) , (register, 0x61, 1)

00063e78: ldrb r3,[r8,#0xf]
	(unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0xf, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00063e7c: add r5,r5,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00063e80: cmp r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x20, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e84: strbne r7,[r8,#0xf]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x63e88, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0xf, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x3c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00063e88: cmp r5,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xa, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0xa, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x34, 4) , (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e8c: bne 0x00063e44
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e44, 4) , (unique, 0x1a80, 1)

00063e90: b 0x00063fa0
	 ---  BRANCH (ram, 0x63fa0, 4)

00063e94: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063e98: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00063e9c: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063ea0: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063ea4: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063ea8: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063eac: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063eb0: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00063eb4: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063eb8: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063ebc: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00063ec0: cmp r3,#0x12
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x12, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x12, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x12, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x12, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063ec4: bhi 0x00063f80
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1f00, 1)

00063ec8: ldr lr,[0x64310]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64310, 4)

00063ecc: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63ecc, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063ed0: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063ed4: ldr lr,[lr,#0x2fc]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x2fc, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063ed8: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063edc: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00063ee0: b 0x00063e94
	 ---  BRANCH (ram, 0x63e94, 4)

00063ee4: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063ee8: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00063eec: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063ef0: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063ef4: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063ef8: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063efc: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063f00: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00063f04: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063f08: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f0c: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00063f10: cmp r3,#0x9f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x9f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x9f, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x9f, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x9f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f14: beq 0x00063f80
	 ---  CBRANCH (ram, 0x63f80, 4) , (register, 0x61, 1)

00063f18: ldr lr,[0x64314]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64314, 4)

00063f1c: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63f1c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063f20: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063f24: ldr lr,[lr,#0x360]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x360, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063f28: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f2c: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00063f30: b 0x00063ee4
	 ---  BRANCH (ram, 0x63ee4, 4)

00063f34: ldr lr,[0x64318]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64318, 4)

00063f38: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63f38, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063f3c: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063f40: ldr lr,[lr,#0x348]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x348, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063f44: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f48: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00063f4c: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f50: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00063f54: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063f58: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063f5c: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063f60: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f64: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063f68: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00063f6c: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063f70: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f74: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00063f78: cmp r3,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063f7c: bls 0x00063f34
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f34, 4) , (unique, 0x2080, 1)

00063f80: cpy r0,r4
	(register, 0x20, 4) COPY (register, 0x30, 4)

00063f84: bl 0x00025fe0
	(register, 0x58, 4) COPY (const, 0x63f88, 4)
	 ---  CALL (ram, 0x25fe0, 4)

00063f88: bl 0x0001f2a0
	(register, 0x58, 4) COPY (const, 0x63f8c, 4)
	 ---  CALL (ram, 0x1f2a0, 4)

00063f8c: mov r2,#0x16
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x16, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x16, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063f90: ldr r3,[0x6431c]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6431c, 4)

00063f94: ldr r3,[pc,r3]
	(unique, 0x1780, 4) INT_ADD (const, 0x63f94, 4) , (const, 0x8, 4)
	(unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063f98: str r2,[r0,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (register, 0x28, 4)

00063f9c: mov r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x30, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00063fa0: cpy r0,r4
	(register, 0x20, 4) COPY (register, 0x30, 4)

00063fa4: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

00063fa8: ldr lr,[0x64320]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64320, 4)

00063fac: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63fac, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063fb0: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00063fb4: ldr lr,[lr,#0x2b4]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x2b4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063fb8: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063fbc: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00063fc0: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063fc4: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00063fc8: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00063fcc: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00063fd0: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00063fd4: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063fd8: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00063fdc: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00063fe0: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00063fe4: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063fe8: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00063fec: cmp r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00063ff0: bls 0x00063fa8
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63fa8, 4) , (unique, 0x2080, 1)

00063ff4: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00063ff8: ldr lr,[0x64324]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64324, 4)

00063ffc: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x63ffc, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00064000: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00064004: ldr lr,[lr,#0x258]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x258, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064008: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006400c: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00064010: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064014: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00064018: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006401c: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00064020: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00064024: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064028: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

0006402c: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00064030: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00064034: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064038: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

0006403c: cmp r3,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064040: bls 0x00063ff8
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63ff8, 4) , (unique, 0x2080, 1)

00064044: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00064048: ldr lr,[0x64328]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64328, 4)

0006404c: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x6404c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00064050: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00064054: ldr lr,[lr,#0x244]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x244, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064058: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006405c: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00064060: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064064: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00064068: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006406c: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00064070: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00064074: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064078: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

0006407c: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00064080: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00064084: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064088: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

0006408c: cmp r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064090: bls 0x00064048
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x64048, 4) , (unique, 0x2080, 1)

00064094: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00064098: ldr lr,[0x6432c]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x6432c, 4)

0006409c: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x6409c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

000640a0: ldr lr,[lr,r3,lsl #0x2]
	(unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (unique, 0x7800, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000640a4: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640a8: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

000640ac: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640b0: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

000640b4: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000640b8: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000640bc: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000640c0: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640c4: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

000640c8: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

000640cc: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

000640d0: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640d4: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

000640d8: cmp r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640dc: bls 0x00064098
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x64098, 4) , (unique, 0x2080, 1)

000640e0: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

000640e4: ldr lr,[0x64330]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64330, 4)

000640e8: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x640e8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

000640ec: add lr,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

000640f0: ldr lr,[lr,#0x264]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x264, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000640f4: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000640f8: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

000640fc: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064100: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

00064104: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064108: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006410c: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00064110: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064114: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00064118: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

0006411c: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00064120: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064124: bcc 0x00063f80
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1b80, 1)

00064128: cmp r3,#0x6
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x6, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x6, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006412c: bls 0x000640e4
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x640e4, 4) , (unique, 0x2080, 1)

00064130: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00064134: ldr lr,[0x64334]
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (const, 0x64334, 4)

00064138: add lr,pc,lr
	(unique, 0x1780, 4) INT_ADD (const, 0x64138, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x58, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

0006413c: cmp r3,#0xc
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0xc, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064140: bhi 0x00063f80
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1f00, 1)

00064144: add r9,lr,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x44, 4) INT_ADD (register, 0x58, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

00064148: ldr r9,[r9,#0x280]
	(unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x280, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006414c: cmp r9,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x44, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064150: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

00064154: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064158: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

0006415c: ldr r9,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064160: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00064164: ldr r12,[r9,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x44, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00064168: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006416c: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

00064170: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

00064174: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00064178: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006417c: bcs 0x0006413c
	 ---  CBRANCH (ram, 0x6413c, 4) , (register, 0x62, 1)

00064180: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00064184: ldr r9,[0x64338]
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (const, 0x64338, 4)

00064188: add r9,pc,r9
	(unique, 0x1780, 4) INT_ADD (const, 0x64188, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x44, 4)
	(register, 0x44, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)

0006418c: cmp r3,#0x2d
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064190: bhi 0x00063f80
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1f00, 1)

00064194: add lr,r9,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x58, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00064198: ldr lr,[lr,#0x18c]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x18c, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006419c: cmp lr,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000641a0: bne 0x00063dfc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63dfc, 4) , (unique, 0x1a80, 1)

000641a4: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000641a8: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

000641ac: ldr lr,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000641b0: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000641b4: ldr r12,[lr,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x58, 4) , (register, 0x50, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000641b8: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000641bc: str r12,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)

000641c0: bls 0x00063e14
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e14, 4) , (unique, 0x2080, 1)

000641c4: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

000641c8: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000641cc: bcs 0x0006418c
	 ---  CBRANCH (ram, 0x6418c, 4) , (register, 0x62, 1)

000641d0: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

000641d4: bl 0x0001f2a0
	(register, 0x58, 4) COPY (const, 0x641d8, 4)
	 ---  CALL (ram, 0x1f2a0, 4)

000641d8: mov r2,#0x16
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x16, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x16, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000641dc: ldr r3,[0x6433c]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6433c, 4)

000641e0: ldr r3,[pc,r3]
	(unique, 0x1780, 4) INT_ADD (const, 0x641e0, 4) , (const, 0x8, 4)
	(unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000641e4: str r2,[r0,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (register, 0x28, 4)

000641e8: b 0x00063f9c
	 ---  BRANCH (ram, 0x63f9c, 4)

000641ec: ldr r3,[0x64340]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x64340, 4)

000641f0: b 0x00063cf8
	 ---  BRANCH (ram, 0x63cf8, 4)

000641f4: add r3,r4,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x44, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x30, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000641f8: str r3,[r4,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000641fc: str r6,[r4,r9]
	(unique, 0x8480, 4) INT_ADD (register, 0x30, 4) , (register, 0x44, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (register, 0x38, 4)

00064200: str r6,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00064204: str r6,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00064208: str r6,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

0006420c: ldr r8,[r5,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064210: str r6,[r4,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00064214: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064218: ldrne r7,[r4,#0x8]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6421c, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006421c: str r6,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00064220: str r8,[r4,#0x1c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00064224: bne 0x00063d6c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63d6c, 4) , (unique, 0x1a80, 1)

00064228: b 0x00063e1c
	 ---  BRANCH (ram, 0x63e1c, 4)

0006422c: cmp r6,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064230: bne 0x000642b8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x642b8, 4) , (unique, 0x1a80, 1)

00064234: cmp r3,#0x55
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x55, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x55, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x55, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x55, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00064238: bls 0x00064278
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x64278, 4) , (unique, 0x2080, 1)

0006423c: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064240: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00064244: add r2,r2,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00064248: cmp r3,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x40, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006424c: str r2,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x28, 4)

00064250: bcs 0x00063e1c
	 ---  CBRANCH (ram, 0x63e1c, 4) , (register, 0x62, 1)

00064254: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

00064258: cmp r12,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x3c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006425c: bls 0x0006423c
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6423c, 4) , (unique, 0x2080, 1)

00064260: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

00064264: ldrb r3,[r0,#0x1]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00064268: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006426c: moveq r0,#0x1
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x64270, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00064270: beq 0x00063e64
	 ---  CBRANCH (ram, 0x63e64, 4) , (register, 0x61, 1)

00064274: b 0x00063e58
	 ---  BRANCH (ram, 0x63e58, 4)

00064278: ldr r2,[0x64344]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x64344, 4)

0006427c: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x6427c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00064280: add r2,r2,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00064284: ldr r2,[r2,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x34, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064288: cmp r2,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x5, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006428c: beq 0x000642d8
	 ---  CBRANCH (ram, 0x642d8, 4) , (register, 0x61, 1)

00064290: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00064294: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00064298: add r2,r2,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006429c: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000642a0: str r2,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x28, 4)

000642a4: bls 0x00063e1c
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63e1c, 4) , (unique, 0x2080, 1)

000642a8: ldr r12,[r1,#0x4]!
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x24, 4)

000642ac: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000642b0: bcs 0x00064234
	 ---  CBRANCH (ram, 0x64234, 4) , (register, 0x62, 1)

000642b4: b 0x00063f80
	 ---  BRANCH (ram, 0x63f80, 4)

000642b8: ldr r3,[0x64348]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x64348, 4)

000642bc: ldr r1,[0x6434c]
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x6434c, 4)

000642c0: ldr r0,[0x64350]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x64350, 4)

000642c4: mov r2,#0xce
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xce, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0xce, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000642c8: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x642c8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000642cc: add r1,pc,r1
	(unique, 0x1780, 4) INT_ADD (const, 0x642cc, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

000642d0: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x642d0, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000642d4: bl 0x0002e594
	(register, 0x58, 4) COPY (const, 0x642d8, 4)
	 ---  CALL (ram, 0x2e594, 4)

000642d8: tst r12,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000642dc: bne 0x00063f80
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x63f80, 4) , (unique, 0x1a80, 1)

000642e0: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000642e4: add r3,r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000642e8: ldr r2,[r2,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (register, 0x50, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000642ec: cmp r8,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000642f0: str r2,[r0],#0x4
	(unique, 0x8800, 4) COPY (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x28, 4)

000642f4: bhi 0x000642a8
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x642a8, 4) , (unique, 0x1f00, 1)

000642f8: b 0x00063e1c
	 ---  BRANCH (ram, 0x63e1c, 4)

