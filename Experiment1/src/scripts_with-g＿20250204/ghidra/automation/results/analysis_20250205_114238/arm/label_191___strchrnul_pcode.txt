Label: 191
Function: __strchrnul
Architecture: arm
Source File: Unknown
Entry Point: 000281fc

P-code:

000281fc: stmdb sp!,{r4,r5,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00028200: bic lr,r0,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0x3, 4)
	(register, 0x58, 4) INT_AND (register, 0x20, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00028204: ldr r2,[0x282ac]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x282ac, 4)

00028208: and r4,r1,#0xff
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xff, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x30, 4) INT_AND (register, 0x24, 4) , (const, 0xff, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0002820c: ldr r1,[lr,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00028210: add r4,r4,r4, lsl #0x8
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x8, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x8, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00028214: and r3,r1,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x24, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028218: add r4,r4,r4, lsl #0x10
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x10, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

0002821c: eor r5,r1,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x34, 4) INT_XOR (register, 0x24, 4) , (register, 0x30, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00028220: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028224: orr r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028228: and r1,r5,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_AND (register, 0x34, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0002822c: add r1,r1,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x28, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00028230: orr r1,r1,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_OR (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00028234: and r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028238: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002823c: mvn r3,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_NEGATE (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00028240: and r12,r0,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_AND (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

00028244: mov r12,r12, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x3, 4)
	(register, 0x50, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00028248: movs r3,r3, lsr r12
	(unique, 0x5180, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x5180, 4)
	(register, 0x2c, 4) COPY (unique, 0x5780, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002824c: bne 0x00028294
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x28294, 4) , (unique, 0x1a80, 1)

00028250: ldr r5,[0x282b0]
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x282b0, 4)

00028254: ldr r0,[0x282b4]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x282b4, 4)

00028258: ldr r1,[lr,#0x4]!
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x58, 4)

0002825c: eor r12,r1,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x50, 4) INT_XOR (register, 0x24, 4) , (register, 0x30, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

00028260: add r3,r1,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x24, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028264: add r2,r12,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x34, 4)
	(register, 0x28, 4) INT_ADD (register, 0x50, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00028268: bic r3,r3,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x41880, 4) INT_NEGATE (register, 0x24, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002826c: bic r2,r2,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(unique, 0x41880, 4) INT_NEGATE (register, 0x50, 4)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (unique, 0x41880, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00028270: orr r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028274: ands r3,r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00028278: beq 0x00028258
	 ---  CBRANCH (ram, 0x28258, 4) , (register, 0x61, 1)

0002827c: rsb r2,r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x28, 4) INT_SUB (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00028280: and r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00028284: clz r3,r3
	(register, 0x2c, 4) LZCOUNT (register, 0x2c, 4)

00028288: rsb r3,r3,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x1f, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_SUB (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002828c: add r0,lr,r3, asr #0x3
	(unique, 0x3e00, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (unique, 0x4100, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (unique, 0x4100, 4)
	(register, 0x20, 4) INT_ADD (register, 0x58, 4) , (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00028290: ldmia sp!,{r4,r5,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

00028294: rsb r2,r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x28, 4) INT_SUB (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00028298: and r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0002829c: clz r3,r3
	(register, 0x2c, 4) LZCOUNT (register, 0x2c, 4)

000282a0: rsb r3,r3,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x1f, 4)
	(register, 0x67, 1) INT_SBORROW (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_SUB (const, 0x1f, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000282a4: add r0,r0,r3, asr #0x3
	(unique, 0x3e00, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x4100, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x4100, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000282a8: ldmia sp!,{r4,r5,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

