Label: 234
Function: __cp_stat64_t64_stat64
Architecture: arm
Source File: Unknown
Entry Point: 0002a5b8

P-code:

0002a5b8: cpy r3,r1
	(register, 0x2c, 4) COPY (register, 0x24, 4)

0002a5bc: ldr r2,[r0,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x44, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5c0: ldr r1,[r0,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x40, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5c4: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a5c8: cmp r2,r1, asr #0x1f
	(unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x1f, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x4100, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (unique, 0x4100, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002a5cc: bne 0x0002a6b4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2a6b4, 4) , (unique, 0x1a80, 1)

0002a5d0: ldr r1,[r0,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x50, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5d4: ldr r2,[r0,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x54, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5d8: cpy r4,r0
	(register, 0x30, 4) COPY (register, 0x20, 4)

0002a5dc: cmp r2,r1, asr #0x1f
	(unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x1f, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x4100, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (unique, 0x4100, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002a5e0: bne 0x0002a6b4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2a6b4, 4) , (unique, 0x1a80, 1)

0002a5e4: ldr r1,[r0,#0x60]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x60, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5e8: ldr r2,[r0,#0x64]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x64, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a5ec: cmp r2,r1, asr #0x1f
	(unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x1f, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x4100, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (unique, 0x4100, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0002a5f0: bne 0x0002a6b4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x2a6b4, 4) , (unique, 0x1a80, 1)

0002a5f4: mov r2,#0x68
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x68, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x68, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002a5f8: mov r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002a5fc: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0002a600: bl 0x00028180
	(register, 0x58, 4) COPY (const, 0x2a604, 4)
	 ---  CALL (ram, 0x28180, 4)

0002a604: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0002a608: ldmia r4,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x30, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a60c: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002a610: ldr r9,[r4,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a614: ldr r8,[r4,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a618: ldr r12,[r4,#0x1c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1c, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a61c: ldr r10,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a620: ldr r7,[r4,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x30, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a624: ldr r6,[r4,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x40, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a628: ldr r5,[r4,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x50, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a62c: ldr lr,[r4,#0x60]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x60, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a630: stmia r3,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a634: add r1,r4,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x8, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x8, 4)
	(register, 0x24, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0002a638: ldmia r1,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a63c: str r9,[r3,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

0002a640: str r8,[r3,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

0002a644: str r10,[r3,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

0002a648: str r12,[r3,#0x1c]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)

0002a64c: ldr r9,[r4,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x48, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a650: ldr r8,[r4,#0x58]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x58, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a654: ldr r12,[r4,#0x68]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x68, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0002a658: str r0,[r3,#0x60]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x60, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0002a65c: str r1,[r3,#0x64]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x64, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0002a660: add r1,r4,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x24, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0002a664: ldmia r1,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a668: str r0,[r3,#0x20]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0002a66c: str r1,[r3,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0002a670: add r1,r4,#0x28
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x28, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x28, 4)
	(register, 0x24, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0002a674: ldmia r1,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a678: str r0,[r3,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x30, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0002a67c: str r1,[r3,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0002a680: add r1,r4,#0x38
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x38, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x38, 4)
	(register, 0x24, 4) INT_ADD (register, 0x30, 4) , (const, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0002a684: ldmia r1,{r0,r1}
	(register, 0x80, 4) COPY (register, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0002a688: str r0,[r3,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x40, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0002a68c: str r1,[r3,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x44, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0002a690: str r7,[r3,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x38, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)

0002a694: str r6,[r3,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

0002a698: str r9,[r3,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

0002a69c: str r5,[r3,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)

0002a6a0: str r8,[r3,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x54, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

0002a6a4: str lr,[r3,#0x58]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x58, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)

0002a6a8: str r12,[r3,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x5c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)

0002a6ac: cpy r0,r2
	(register, 0x20, 4) COPY (register, 0x28, 4)

0002a6b0: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0002a6b4: bl 0x0001f2a0
	(register, 0x58, 4) COPY (const, 0x2a6b8, 4)
	 ---  CALL (ram, 0x1f2a0, 4)

0002a6b8: mov r1,#0x4b
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4b, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x4b, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002a6bc: ldr r3,[0x2a6d0]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x2a6d0, 4)

0002a6c0: mvn r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) INT_NEGATE (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0002a6c4: ldr r3,[pc,r3]
	(unique, 0x1780, 4) INT_ADD (const, 0x2a6c4, 4) , (const, 0x8, 4)
	(unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0002a6c8: str r1,[r0,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (register, 0x24, 4)

0002a6cc: b 0x0002a6ac
	 ---  BRANCH (ram, 0x2a6ac, 4)

