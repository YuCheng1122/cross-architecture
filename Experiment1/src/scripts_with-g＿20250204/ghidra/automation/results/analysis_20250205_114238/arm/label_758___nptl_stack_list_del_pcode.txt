Label: 758
Function: __nptl_stack_list_del
Architecture: arm
Source File: Unknown
Entry Point: 0005f048

P-code:

0005f048: str lr,[sp,#-0x4]!
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)

0005f04c: ldr r3,[0x5f090]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x5f090, 4)

0005f050: ldr r2,[0x5f094]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x5f094, 4)

0005f054: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x5f054, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0005f058: ldr r3,[r3,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0005f05c: str r0,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0005f060: mvn r12,#0xf000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_NEGATE (const, 0xf000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005f064: mov lr,pc
	(register, 0x58, 4) INT_ADD (const, 0x5f068, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005f068: sub pc,r12,#0x5f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5f, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x5f, 4)
	(unique, 0x71e80, 4) INT_SUB (register, 0x50, 4) , (const, 0x5f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x71e80, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x71e80, 4) , (const, 0x0, 4)
	(register, 0x70, 4) COPY (register, 0x74, 4)
	(unique, 0x71f00, 4) INT_RIGHT (register, 0x70, 4) , (const, 0x5, 4)
	(unique, 0x71f80, 4) INT_AND (unique, 0x71f00, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x71f80, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) COPY (unique, 0x71e80, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

0005f06c: ldmia r0,{r1,r2}
	(register, 0x80, 4) COPY (register, 0x20, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0005f070: str r2,[r1,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0005f074: str r1,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

0005f078: mvn r12,#0xf000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_NEGATE (const, 0xf000, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005f07c: mov lr,pc
	(register, 0x58, 4) INT_ADD (const, 0x5f080, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005f080: sub pc,r12,#0x5f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x5f, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x5f, 4)
	(unique, 0x71e80, 4) INT_SUB (register, 0x50, 4) , (const, 0x5f, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x71e80, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x71e80, 4) , (const, 0x0, 4)
	(register, 0x70, 4) COPY (register, 0x74, 4)
	(unique, 0x71f00, 4) INT_RIGHT (register, 0x70, 4) , (const, 0x5, 4)
	(unique, 0x71f80, 4) INT_AND (unique, 0x71f00, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x71f80, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) COPY (unique, 0x71e80, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

0005f084: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0005f088: str r2,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0005f08c: ldr pc,[sp],#0x4
	(unique, 0x8800, 4) COPY (register, 0x54, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(unique, 0x43900, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
	(unique, 0x0, 4) INT_AND (unique, 0x43900, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (unique, 0x43900, 4) , (const, 0xfffffffe, 4)
	 ---  BRANCHIND (register, 0x5c, 4)

