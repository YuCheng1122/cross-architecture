Label: 546
Function: do_lookup_x
Architecture: arm
Source File: Unknown
Entry Point: 0004320c

P-code:

0004320c: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00043210: ldr r10,[0x43c64]
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c64, 4)

00043214: sub sp,sp,#0x6c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x6c, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00043218: ldr r12,[sp,#0x94]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x94, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004321c: add r10,pc,r10
	(unique, 0x1780, 4) INT_ADD (const, 0x4321c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x48, 4)
	(register, 0x48, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x48, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

00043220: cpy r11,r1
	(register, 0x4c, 4) COPY (register, 0x24, 4)

00043224: ldr r8,[r12,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043228: ldr r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004322c: str r10,[sp,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043230: str r0,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

00043234: str r2,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00043238: str r3,[sp,#0x2c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0004323c: ldr r3,[sp,#0xac]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xac, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043240: ldr r6,[r12,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043244: clz lr,r3
	(register, 0x58, 4) LZCOUNT (register, 0x2c, 4)

00043248: sub r3,r5,#0xc0000001
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc0000001, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xc0000001, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0xc0000001, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x34, 4) , (const, 0xc0000001, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0004324c: add r6,r6,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

00043250: ldr r3,[sp,#0xa8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043254: mov lr,lr, lsr #0x5
	(unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x58, 4) , (const, 0x5, 4)
	(register, 0x58, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043258: and r3,r3,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0004325c: str r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043260: mov r3,r1, lsr #0x5
	(unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x5, 4)
	(register, 0x2c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043264: ldr r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043268: str r3,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0004326c: str lr,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)

00043270: b 0x000432fc
	 ---  BRANCH (ram, 0x432fc, 4)

00043274: ldr r1,[r4,#0x188]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x188, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043278: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004327c: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

00043280: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043284: str r3,[sp,#0x60]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x60, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043288: str r3,[sp,#0x64]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x64, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0004328c: ldrb r3,[r4,#0x1a6]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a6, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043290: ldr r2,[r4,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x38, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043294: ldr r0,[r4,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x34, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043298: ands r3,r3,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004329c: ldrne r3,[r4,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x432a0, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432a0: ldr r0,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432a4: ldr r2,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432a8: addne r2,r2,r3
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x432ac, 4) , (unique, 0x2680, 1)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000432ac: add r3,r3,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000432b0: ldr r0,[r4,#0x194]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x194, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432b4: str r3,[sp,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000432b8: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000432bc: beq 0x000433ac
	 ---  CBRANCH (ram, 0x433ac, 4) , (register, 0x61, 1)

000432c0: ldr r12,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432c4: ldr r3,[r4,#0x18c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432c8: and r3,r3,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000432cc: ldr r12,[r0,r3,lsl #0x2]
	(unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (unique, 0x7800, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000432d0: ldr r0,[r4,#0x190]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x190, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000432d4: and r3,r11,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_AND (register, 0x4c, 4) , (const, 0x1f, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000432d8: mov r0,r11, lsr r0
	(unique, 0x5180, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x5180, 4)
	(register, 0x20, 4) COPY (unique, 0x5780, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000432dc: and r0,r0,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) INT_AND (register, 0x20, 4) , (const, 0x1f, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000432e0: mov r3,r12, lsr r3
	(unique, 0x5180, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x5180, 4)
	(register, 0x2c, 4) COPY (unique, 0x5780, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000432e4: and r3,r3,r12, lsr r0
	(unique, 0x5180, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
	(unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
	(unique, 0x5280, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x5200, 4)
	(unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
	(unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
	(unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
	(unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
	(unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
	(unique, 0x5780, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x5180, 4)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x5780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000432e8: tst r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000432ec: bne 0x000434e0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x434e0, 4) , (unique, 0x1a80, 1)

000432f0: add r5,r5,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

000432f4: cmp r8,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x34, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000432f8: bls 0x00043740
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43740, 4) , (unique, 0x2080, 1)

000432fc: ldr r3,[r6,#0x4]!
	(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x38, 4)

00043300: ldr r4,[r3,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043304: cmp r4,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x44, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x44, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x30, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043308: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

0004330c: ldr r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043310: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043314: beq 0x00043324
	 ---  CBRANCH (ram, 0x43324, 4) , (register, 0x61, 1)

00043318: ldrb r3,[r4,#0x1a4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a4, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0004331c: tst r3,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043320: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

00043324: ldrb r3,[r4,#0x1a6]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a6, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043328: tst r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004332c: beq 0x00043348
	 ---  CBRANCH (ram, 0x43348, 4) , (register, 0x61, 1)

00043330: ldr r3,[sp,#0xac]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xac, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043334: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043338: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

0004333c: ldrb r3,[r3,#0x1a6]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1a6, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043340: tst r3,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043344: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

00043348: ldr r3,[0x43c68]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c68, 4)

0004334c: ldr r3,[r10,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043350: str r3,[sp,#0x28]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043354: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043358: tst r3,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004335c: beq 0x00043274
	 ---  CBRANCH (ram, 0x43274, 4) , (register, 0x61, 1)

00043360: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043364: ldrb r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043368: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004336c: beq 0x00043388
	 ---  CBRANCH (ram, 0x43388, 4) , (register, 0x61, 1)

00043370: ldr r0,[0x43c6c]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c6c, 4)

00043374: ldr r1,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043378: ldr r3,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004337c: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x4337c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043380: bl 0x000455a8
	(register, 0x58, 4) COPY (const, 0x43384, 4)
	 ---  CALL (ram, 0x455a8, 4)

00043384: b 0x00043274
	 ---  BRANCH (ram, 0x43274, 4)

00043388: ldr r3,[0x43c70]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c70, 4)

0004338c: ldr r3,[r10,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043390: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043394: ldr r2,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043398: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004339c: bne 0x00043370
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43370, 4) , (unique, 0x1a80, 1)

000433a0: ldr r2,[0x43c74]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c74, 4)

000433a4: add r2,pc,r2
	(unique, 0x1780, 4) INT_ADD (const, 0x433a4, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000433a8: b 0x00043370
	 ---  BRANCH (ram, 0x43370, 4)

000433ac: ldr r3,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000433b0: ldr r0,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000433b4: cmn r0,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x42600, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42600, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000433b8: beq 0x000438d4
	 ---  CBRANCH (ram, 0x438d4, 4) , (register, 0x61, 1)

000433bc: str r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

000433c0: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x433c4, 4)
	 ---  CALL (ram, 0x1ead0, 4)

000433c4: ldr r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000433c8: mov r1,r1, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000433cc: ldr r3,[r4,#0x19c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x19c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000433d0: ldr r7,[r3,r1]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x24, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000433d4: cmp r7,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000433d8: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

000433dc: add r3,sp,#0x60
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x60, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000433e0: add r1,sp,#0x64
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x64, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x24, 4) INT_ADD (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

000433e4: str r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

000433e8: str r11,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)

000433ec: str r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)

000433f0: str r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

000433f4: str r8,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

000433f8: str r10,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

000433fc: cpy r5,r2
	(register, 0x34, 4) COPY (register, 0x28, 4)

00043400: cpy r9,r3
	(register, 0x44, 4) COPY (register, 0x2c, 4)

00043404: cpy r11,r1
	(register, 0x4c, 4) COPY (register, 0x24, 4)

00043408: ldr r6,[sp,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004340c: ldr r8,[sp,#0xa8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043410: ldr r10,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043414: b 0x00043428
	 ---  BRANCH (ram, 0x43428, 4)

00043418: ldr r3,[r4,#0x198]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x198, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004341c: ldr r7,[r3,r7,lsl #0x2]
	(unique, 0x7800, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x2, 4)
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x7800, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043420: cmp r7,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043424: beq 0x0004374c
	 ---  CBRANCH (ram, 0x4374c, 4) , (register, 0x61, 1)

00043428: add r3,r5,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0004342c: str r3,[sp,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043430: cpy r0,r10
	(register, 0x20, 4) COPY (register, 0x48, 4)

00043434: ldr r3,[sp,#0xa0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043438: ldr r2,[sp,#0x9c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x9c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004343c: ldr r1,[sp,#0x2c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043440: str r9,[sp,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

00043444: str r11,[sp,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)

00043448: str r4,[sp,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

0004344c: str r6,[sp,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00043450: str r7,[sp,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)

00043454: str r8,[sp,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00043458: bl 0x0004305c
	(register, 0x58, 4) COPY (const, 0x4345c, 4)
	 ---  CALL (ram, 0x4305c, 4)

0004345c: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043460: beq 0x00043418
	 ---  CBRANCH (ram, 0x43418, 4) , (register, 0x61, 1)

00043464: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00043468: ldr r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004346c: ldr r11,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043470: ldr r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043474: ldr r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043478: ldr r8,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004347c: ldr r10,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043480: ldrb r2,[r3,#0xd]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xd, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00043484: and r2,r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043488: sub r1,r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0004348c: cmp r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043490: bls 0x000432f0
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x432f0, 4) , (unique, 0x2080, 1)

00043494: ldr r1,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043498: cmp r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x3, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x3, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004349c: orrne r1,r1,#0x1
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x434a0, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) INT_OR (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

000434a0: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000434a4: beq 0x000435a8
	 ---  CBRANCH (ram, 0x435a8, 4) , (register, 0x61, 1)

000434a8: ldrb r2,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

000434ac: mov r2,r2, lsr #0x4
	(unique, 0x3800, 4) INT_SUB (const, 0x4, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000434b0: cmp r2,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000434b4: beq 0x0004360c
	 ---  CBRANCH (ram, 0x4360c, 4) , (register, 0x61, 1)

000434b8: cmp r2,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xa, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0xa, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000434bc: beq 0x0004363c
	 ---  CBRANCH (ram, 0x4363c, 4) , (register, 0x61, 1)

000434c0: cmp r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000434c4: bne 0x000432f0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x432f0, 4) , (unique, 0x1a80, 1)

000434c8: ldr r2,[sp,#0x90]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x90, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000434cc: str r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000434d0: str r4,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

000434d4: mov r0,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000434d8: add sp,sp,#0x6c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

000434dc: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

000434e0: cpy r0,r11
	(register, 0x20, 4) COPY (register, 0x4c, 4)

000434e4: str r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

000434e8: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x434ec, 4)
	 ---  CALL (ram, 0x1ead0, 4)

000434ec: ldr r3,[r4,#0x198]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x198, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000434f0: ldr r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000434f4: ldr r3,[r3,r1,lsl #0x2]
	(unique, 0x7800, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x7800, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

000434f8: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000434fc: beq 0x000432f0
	 ---  CBRANCH (ram, 0x432f0, 4) , (register, 0x61, 1)

00043500: ldr r7,[r4,#0x19c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x19c, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043504: add r1,sp,#0x64
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x64, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x24, 4) INT_ADD (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043508: add r7,r7,r3, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (unique, 0x3580, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

0004350c: add r3,sp,#0x60
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x60, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043510: str r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00043514: str r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)

00043518: str r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

0004351c: str r8,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00043520: str r10,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043524: cpy r6,r2
	(register, 0x38, 4) COPY (register, 0x28, 4)

00043528: cpy r9,r3
	(register, 0x44, 4) COPY (register, 0x2c, 4)

0004352c: cpy r10,r1
	(register, 0x48, 4) COPY (register, 0x24, 4)

00043530: ldr r5,[sp,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043534: ldr r8,[sp,#0xa8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043538: b 0x00043544
	 ---  BRANCH (ram, 0x43544, 4)

0004353c: tst r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043540: bne 0x00043988
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43988, 4) , (unique, 0x1a80, 1)

00043544: cpy r3,r7
	(register, 0x2c, 4) COPY (register, 0x3c, 4)

00043548: ldr r2,[r7],#0x4
	(unique, 0x8800, 4) COPY (register, 0x3c, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

0004354c: eor r1,r2,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x24, 4) INT_XOR (register, 0x28, 4) , (register, 0x4c, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043550: movs r1,r1, lsr #0x1
	(unique, 0x3800, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043554: bne 0x0004353c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4353c, 4) , (unique, 0x1a80, 1)

00043558: ldr r2,[r4,#0x19c]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x19c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004355c: ldr r1,[sp,#0x2c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043560: sub r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043564: mov r3,r3, asr #0x2
	(unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043568: str r3,[sp,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0004356c: add r3,r6,r3, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043570: str r3,[sp,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043574: ldr r2,[sp,#0x9c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x9c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043578: ldr r3,[sp,#0xa0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004357c: ldr r0,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043580: str r9,[sp,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

00043584: str r10,[sp,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043588: str r4,[sp,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

0004358c: str r5,[sp,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)

00043590: str r8,[sp,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00043594: bl 0x0004305c
	(register, 0x58, 4) COPY (const, 0x43598, 4)
	 ---  CALL (ram, 0x4305c, 4)

00043598: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004359c: bne 0x00043bcc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43bcc, 4) , (unique, 0x1a80, 1)

000435a0: ldr r2,[r7,#-0x4]
	(unique, 0x8380, 4) INT_ADD (register, 0x3c, 4) , (const, 0xfffffffc, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)

000435a4: b 0x0004353c
	 ---  BRANCH (ram, 0x4353c, 4)

000435a8: ldr r2,[sp,#0xac]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xac, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435ac: ldrb r2,[r2,#0x1a4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1a4, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

000435b0: tst r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000435b4: bne 0x000434a8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x434a8, 4) , (unique, 0x1a80, 1)

000435b8: ldr r2,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435bc: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000435c0: bne 0x000439a0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x439a0, 4) , (unique, 0x1a80, 1)

000435c4: ldr r2,[sp,#0xa8]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435c8: tst r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000435cc: beq 0x000434a8
	 ---  CBRANCH (ram, 0x434a8, 4) , (register, 0x61, 1)

000435d0: ldr r1,[sp,#0x2c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435d4: ldr r2,[r1,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435d8: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000435dc: beq 0x000434a8
	 ---  CBRANCH (ram, 0x434a8, 4) , (register, 0x61, 1)

000435e0: ldrh r2,[r1,#0xe]
	(unique, 0x9180, 4) INT_ADD (register, 0x24, 4) , (const, 0xe, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x44100, 2)

000435e4: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000435e8: bne 0x000434a8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x434a8, 4) , (unique, 0x1a80, 1)

000435ec: ldr r0,[0x43c78]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c78, 4)

000435f0: ldr r1,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435f4: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000435f8: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x435f8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000435fc: str r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043600: bl 0x0004568c
	(register, 0x58, 4) COPY (const, 0x43604, 4)
	 ---  CALL (ram, 0x4568c, 4)

00043604: ldr r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043608: b 0x000439bc
	 ---  BRANCH (ram, 0x439bc, 4)

0004360c: ldr r2,[0x43c7c]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c7c, 4)

00043610: ldr r2,[r10,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x48, 4) , (register, 0x28, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043614: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043618: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004361c: beq 0x000434c8
	 ---  CBRANCH (ram, 0x434c8, 4) , (register, 0x61, 1)

00043620: ldr r2,[sp,#0x90]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x90, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043624: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043628: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004362c: ldreq r2,[sp,#0x90]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43630, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x90, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043630: streq r3,[r2,#0x0]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43634, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043634: streq r4,[r2,#0x4]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43638, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

00043638: b 0x000432f0
	 ---  BRANCH (ram, 0x432f0, 4)

0004363c: ldr r9,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043640: str r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043644: ldr r2,[0x43c80]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c80, 4)

00043648: ldr r3,[sp,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004364c: add r5,r9,r9, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x44, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x34, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043650: add r5,r9,r5, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x34, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043654: ldr r6,[r3,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043658: mov r5,r5, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x3, 4)
	(register, 0x34, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0004365c: add r2,r5,#0x18
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x18, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x18, 4)
	(register, 0x28, 4) INT_ADD (register, 0x34, 4) , (const, 0x18, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043660: add r3,r6,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x38, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043664: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

00043668: str r3,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0004366c: add r5,r6,r5
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x34, 4)
	(register, 0x34, 4) INT_ADD (register, 0x38, 4) , (register, 0x34, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043670: mov r3,r9, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x44, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043674: str r3,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043678: str r6,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

0004367c: bl 0x0003aec4
	(register, 0x58, 4) COPY (const, 0x43680, 4)
	 ---  CALL (ram, 0x3aec4, 4)

00043680: ldr r10,[r5,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x30, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043684: ldr r8,[r5,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x34, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043688: cmp r10,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004368c: ldr r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043690: beq 0x00043b38
	 ---  CBRANCH (ram, 0x43b38, 4) , (register, 0x61, 1)

00043694: cpy r1,r8
	(register, 0x24, 4) COPY (register, 0x40, 4)

00043698: cpy r0,r11
	(register, 0x20, 4) COPY (register, 0x4c, 4)

0004369c: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x436a0, 4)
	 ---  CALL (ram, 0x1ead0, 4)

000436a0: cpy r0,r11
	(register, 0x20, 4) COPY (register, 0x4c, 4)

000436a4: cpy r7,r1
	(register, 0x3c, 4) COPY (register, 0x24, 4)

000436a8: sub r1,r8,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x2, 4)
	(register, 0x24, 4) INT_SUB (register, 0x40, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

000436ac: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x436b0, 4)
	 ---  CALL (ram, 0x1ead0, 4)

000436b0: add r2,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

000436b4: mov r1,r2, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000436b8: cpy r6,r7
	(register, 0x38, 4) COPY (register, 0x3c, 4)

000436bc: str r4,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

000436c0: str r7,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)

000436c4: cpy r4,r2
	(register, 0x30, 4) COPY (register, 0x28, 4)

000436c8: cpy r7,r1
	(register, 0x3c, 4) COPY (register, 0x24, 4)

000436cc: str r9,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

000436d0: ldr r9,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000436d4: add r5,r10,r6, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x34, 4) INT_ADD (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

000436d8: b 0x000436f4
	 ---  BRANCH (ram, 0x436f4, 4)

000436dc: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000436e0: beq 0x00043780
	 ---  CBRANCH (ram, 0x43780, 4) , (register, 0x61, 1)

000436e4: add r6,r6,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x30, 4)
	(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

000436e8: cmp r8,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x38, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000436ec: add r5,r5,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x3c, 4)
	(register, 0x34, 4) INT_ADD (register, 0x34, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

000436f0: bls 0x000438c4
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x438c4, 4) , (unique, 0x2080, 1)

000436f4: ldr r3,[r5,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000436f8: ldr r0,[r5,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000436fc: cmp r11,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x4c, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043700: bne 0x000436dc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x436dc, 4) , (unique, 0x1a80, 1)

00043704: cpy r1,r9
	(register, 0x24, 4) COPY (register, 0x44, 4)

00043708: bl 0x0003c5c4
	(register, 0x58, 4) COPY (const, 0x4370c, 4)
	 ---  CALL (ram, 0x3c5c4, 4)

0004370c: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043710: bne 0x000436e4
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x436e4, 4) , (unique, 0x1a80, 1)

00043714: ldr r2,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043718: ldr r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004371c: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043720: ldr r4,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043724: ldreq r3,[r5,#0x8]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43728, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043728: ldreq r4,[r5,#0xc]
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4372c, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0xc, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004372c: ldr r2,[sp,#0x90]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x90, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043730: ldr r0,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043734: stmia r2,{r3,r4}
	(register, 0x80, 4) COPY (register, 0x28, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00043738: bl 0x0003b9f0
	(register, 0x58, 4) COPY (const, 0x4373c, 4)
	 ---  CALL (ram, 0x3b9f0, 4)

0004373c: b 0x000434d4
	 ---  BRANCH (ram, 0x434d4, 4)

00043740: mov r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043744: add sp,sp,#0x6c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

00043748: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0004374c: ldr r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043750: ldr r11,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043754: ldr r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043758: ldr r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004375c: ldr r8,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043760: ldr r10,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043764: ldr r3,[sp,#0x60]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x60, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043768: cmp r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004376c: bne 0x000432f0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x432f0, 4) , (unique, 0x1a80, 1)

00043770: ldr r3,[sp,#0x64]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x64, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043774: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043778: bne 0x00043480
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43480, 4) , (unique, 0x1a80, 1)

0004377c: b 0x000432f0
	 ---  BRANCH (ram, 0x432f0, 4)

00043780: ldr r9,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043784: ldr r0,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043788: ldr r12,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004378c: add r0,r0,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x44, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043790: add r0,r9,r0, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043794: add r0,r12,r0, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043798: ldr r12,[r0,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x38, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004379c: add r0,r8,r8, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x40, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x40, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000437a0: cmp r0,r12, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_LESSEQUAL (unique, 0x3580, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (unique, 0x3580, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x20, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000437a4: cpy r2,r4
	(register, 0x28, 4) COPY (register, 0x30, 4)

000437a8: cpy r1,r7
	(register, 0x24, 4) COPY (register, 0x3c, 4)

000437ac: ldr r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437b0: ldr r4,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437b4: ldr r7,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437b8: bls 0x000439e0
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x439e0, 4) , (unique, 0x2080, 1)

000437bc: ldr r0,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437c0: ldr r12,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437c4: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000437c8: ldr r0,[sp,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437cc: add r12,r0,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x20, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

000437d0: beq 0x00043850
	 ---  CBRANCH (ram, 0x43850, 4) , (register, 0x61, 1)

000437d4: add r0,r10,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000437d8: b 0x000437ec
	 ---  BRANCH (ram, 0x437ec, 4)

000437dc: add r7,r7,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

000437e0: cmp r8,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x3c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000437e4: add r0,r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000437e8: bls 0x000438cc
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x438cc, 4) , (unique, 0x2080, 1)

000437ec: ldr lr,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437f0: cmp lr,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000437f4: bne 0x000437dc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x437dc, 4) , (unique, 0x1a80, 1)

000437f8: ldr r2,[sp,#0x2c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000437fc: stmia r0,{r11,r12}
	(register, 0x80, 4) COPY (register, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x50, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00043800: str r2,[r0,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00043804: ldr r2,[sp,#0xac]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xac, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043808: str r2,[r0,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0004380c: str r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043810: ldr r3,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043814: ldr r0,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043818: add r2,r3,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0004381c: ldr r3,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043820: add r2,r9,r2, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043824: add r2,r3,r2, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043828: ldr r1,[r2,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x38, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004382c: add r1,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043830: str r1,[r2,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x38, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

00043834: bl 0x0003b9f0
	(register, 0x58, 4) COPY (const, 0x43838, 4)
	 ---  CALL (ram, 0x3b9f0, 4)

00043838: ldr r2,[sp,#0x90]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x90, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004383c: ldr r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043840: str r4,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

00043844: str r3,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043848: b 0x000434d4
	 ---  BRANCH (ram, 0x434d4, 4)

0004384c: sub r7,r7,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043850: add r0,r10,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043854: b 0x00043868
	 ---  BRANCH (ram, 0x43868, 4)

00043858: add r7,r7,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

0004385c: cmp r8,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x3c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x40, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043860: add r0,r0,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043864: bls 0x0004384c
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4384c, 4) , (unique, 0x2080, 1)

00043868: ldr lr,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004386c: cmp lr,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043870: bne 0x00043858
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43858, 4) , (unique, 0x1a80, 1)

00043874: ldrb r2,[r4,#0x1a4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a4, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00043878: stmia r0,{r11,r12}
	(register, 0x80, 4) COPY (register, 0x20, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x50, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0004387c: and r2,r2,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) INT_AND (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043880: cmp r2,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043884: str r3,[r0,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043888: str r4,[r0,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

0004388c: bne 0x0004380c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4380c, 4) , (unique, 0x1a80, 1)

00043890: ldrb r2,[r4,#0x1a7]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a7, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00043894: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043898: bne 0x0004380c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4380c, 4) , (unique, 0x1a80, 1)

0004389c: ldr r2,[sp,#0xa0]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000438a0: tst r2,#0x8
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x8, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000438a4: bne 0x00043be8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43be8, 4) , (unique, 0x1a80, 1)

000438a8: ldr r2,[sp,#0x28]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000438ac: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000438b0: tst r2,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000438b4: bne 0x00043c10
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43c10, 4) , (unique, 0x1a80, 1)

000438b8: mov r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000438bc: strb r2,[r4,#0x1a7]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a7, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

000438c0: b 0x0004380c
	 ---  BRANCH (ram, 0x4380c, 4)

000438c4: sub r6,r6,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x40, 4)
	(register, 0x38, 4) INT_SUB (register, 0x38, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

000438c8: b 0x000436d4
	 ---  BRANCH (ram, 0x436d4, 4)

000438cc: sub r7,r7,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

000438d0: b 0x000437d4
	 ---  BRANCH (ram, 0x437d4, 4)

000438d4: ldr r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000438d8: ldrb r7,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x3c, 4) INT_ZEXT (unique, 0x43980, 1)

000438dc: cmp r7,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000438e0: cpyeq r1,r7
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x438e4, 4) , (unique, 0x2680, 1)
	(register, 0x24, 4) COPY (register, 0x3c, 4)

000438e4: beq 0x0004397c
	 ---  CBRANCH (ram, 0x4397c, 4) , (register, 0x61, 1)

000438e8: ldrb r3,[r3,#0x1]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

000438ec: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000438f0: beq 0x00043bb4
	 ---  CBRANCH (ram, 0x43bb4, 4) , (register, 0x61, 1)

000438f4: add r7,r3,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

000438f8: ldr r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000438fc: ldrb r3,[r3,#0x2]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x2, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043900: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043904: beq 0x00043bb4
	 ---  CBRANCH (ram, 0x43bb4, 4) , (register, 0x61, 1)

00043908: add r7,r3,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

0004390c: ldr r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043910: ldrb r3,[r3,#0x3]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x3, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043914: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043918: beq 0x00043bb4
	 ---  CBRANCH (ram, 0x43bb4, 4) , (register, 0x61, 1)

0004391c: add r7,r3,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043920: ldr r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043924: ldrb r3,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

00043928: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004392c: beq 0x00043bb4
	 ---  CBRANCH (ram, 0x43bb4, 4) , (register, 0x61, 1)

00043930: ldr r12,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043934: add r3,r3,r7, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043938: ldrb r0,[r12,#0x5]
	(unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x5, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

0004393c: add lr,r12,#0x5
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x5, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x5, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x5, 4)
	(register, 0x58, 4) INT_ADD (register, 0x50, 4) , (const, 0x5, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)

00043940: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043944: beq 0x00043964
	 ---  CBRANCH (ram, 0x43964, 4) , (register, 0x61, 1)

00043948: add r3,r0,r3, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0004394c: ldrb r0,[lr,#0x1]!
	(register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0x1, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (register, 0x58, 4)
	(register, 0x20, 4) INT_ZEXT (unique, 0x43980, 1)

00043950: mov r12,r3, lsr #0x18
	(unique, 0x3800, 4) INT_SUB (const, 0x18, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x18, 4)
	(register, 0x50, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043954: and r12,r12,#0xf0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0xf0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

00043958: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0004395c: eor r3,r3,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x2c, 4) INT_XOR (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043960: bne 0x00043948
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43948, 4) , (unique, 0x1a80, 1)

00043964: bic r7,r3,#0xf0000000
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf0000000, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x2, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x2, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x41780, 4) INT_NEGATE (const, 0xf0000000, 4)
	(register, 0x3c, 4) INT_AND (register, 0x2c, 4) , (unique, 0x41780, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043968: cpy r0,r7
	(register, 0x20, 4) COPY (register, 0x3c, 4)

0004396c: str r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00043970: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43974, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043974: ldr r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043978: mov r1,r1, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0004397c: ldr r3,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043980: str r7,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)

00043984: b 0x000433cc
	 ---  BRANCH (ram, 0x433cc, 4)

00043988: ldr r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004398c: ldr r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043990: ldr r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043994: ldr r8,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043998: ldr r10,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0004399c: b 0x00043764
	 ---  BRANCH (ram, 0x43764, 4)

000439a0: ldr r0,[0x43c84]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c84, 4)

000439a4: ldr r1,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439a8: ldr r2,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439ac: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x439ac, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000439b0: str r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000439b4: bl 0x0004568c
	(register, 0x58, 4) COPY (const, 0x439b8, 4)
	 ---  CALL (ram, 0x4568c, 4)

000439b8: ldr r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439bc: ldr r2,[r4,#0x1ac]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1ac, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439c0: tst r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

000439c4: beq 0x000434a8
	 ---  CBRANCH (ram, 0x434a8, 4) , (register, 0x61, 1)

000439c8: ldr r3,[0x43c88]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c88, 4)

000439cc: mov r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000439d0: ldr r2,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439d4: ldr r1,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

000439d8: add r3,pc,r3
	(unique, 0x1780, 4) INT_ADD (const, 0x439d8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

000439dc: bl 0x0003f0d4
	(register, 0x58, 4) COPY (const, 0x439e0, 4)
	 ---  CALL (ram, 0x3f0d4, 4)

000439e0: add r0,r8,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x1, 4)
	(register, 0x20, 4) INT_ADD (register, 0x40, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

000439e4: str r3,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

000439e8: bl 0x000449c4
	(register, 0x58, 4) COPY (const, 0x439ec, 4)
	 ---  CALL (ram, 0x449c4, 4)

000439ec: cpy r6,r0
	(register, 0x38, 4) COPY (register, 0x20, 4)

000439f0: mov r0,#0x10
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

000439f4: cpy r1,r6
	(register, 0x24, 4) COPY (register, 0x38, 4)

000439f8: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x439fc, 4)
	 ---  CALL (ram, 0x26a60, 4)

000439fc: subs r3,r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043a00: str r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043a04: beq 0x00043c50
	 ---  CBRANCH (ram, 0x43c50, 4) , (register, 0x61, 1)

00043a08: sub r3,r6,#0x2
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x38, 4) , (const, 0x2, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043a0c: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043a10: str r3,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043a14: ldr r3,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a18: beq 0x00043ac0
	 ---  CBRANCH (ram, 0x43ac0, 4) , (register, 0x61, 1)

00043a1c: add r2,r10,r8, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x40, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043a20: str r11,[sp,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x5c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)

00043a24: cpy r7,r10
	(register, 0x3c, 4) COPY (register, 0x48, 4)

00043a28: cpy r11,r2
	(register, 0x4c, 4) COPY (register, 0x28, 4)

00043a2c: str r3,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043a30: str r4,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

00043a34: str r9,[sp,#0x54]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x54, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)

00043a38: str r10,[sp,#0x58]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x58, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043a3c: ldr r5,[r7,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a40: cmp r5,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043a44: beq 0x00043aa8
	 ---  CBRANCH (ram, 0x43aa8, 4) , (register, 0x61, 1)

00043a48: ldr r8,[r7,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a4c: cpy r1,r6
	(register, 0x24, 4) COPY (register, 0x38, 4)

00043a50: cpy r0,r8
	(register, 0x20, 4) COPY (register, 0x40, 4)

00043a54: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43a58, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043a58: cpy r0,r8
	(register, 0x20, 4) COPY (register, 0x40, 4)

00043a5c: cpy r4,r1
	(register, 0x30, 4) COPY (register, 0x24, 4)

00043a60: ldr r1,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a64: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43a68, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043a68: ldr r9,[r7,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x8, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a6c: add r1,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043a70: ldr r10,[r7,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a74: ldr r2,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a78: mov lr,r1, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x58, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043a7c: add r0,r2,r4, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x20, 4) INT_ADD (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043a80: b 0x00043a94
	 ---  BRANCH (ram, 0x43a94, 4)

00043a84: add r4,r4,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00043a88: cmp r6,r4
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x30, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x38, 4) , (register, 0x30, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043a8c: add r0,r0,lr
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x58, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x58, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x58, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043a90: bls 0x00043b30
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43b30, 4) , (unique, 0x2080, 1)

00043a94: ldr r3,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043a98: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043a9c: bne 0x00043a84
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43a84, 4) , (unique, 0x1a80, 1)

00043aa0: stmib r0,{r5,r9,r10}
	(register, 0x80, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00043aa4: str r8,[r0,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)

00043aa8: add r7,r7,#0x10
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0x10, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0x10, 4)
	(register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043aac: cmp r7,r11
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x4c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043ab0: bne 0x00043a3c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43a3c, 4) , (unique, 0x1a80, 1)

00043ab4: ldr r11,[sp,#0x5c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x5c, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ab8: add r3,sp,#0x4c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

00043abc: ldmia r3,{r3,r4,r9,r10}
	(register, 0x80, 4) COPY (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

00043ac0: str r3,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043ac4: ldr r3,[sp,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ac8: cpy r0,r10
	(register, 0x20, 4) COPY (register, 0x48, 4)

00043acc: add r5,r3,r9
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x34, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043ad0: ldr r3,[sp,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ad4: add r5,r9,r5, lsl #0x1
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x34, 4) INT_ADD (register, 0x44, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043ad8: add r5,r3,r5, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x34, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)

00043adc: ldr r2,[r5,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x3c, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ae0: blx r2
	(unique, 0x0, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x28, 4) , (const, 0xfffffffe, 4)
	(register, 0x58, 4) COPY (const, 0x43ae4, 4)
	 ---  CALLIND (register, 0x5c, 4)

00043ae4: ldr r10,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ae8: ldr r3,[sp,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043aec: ldr r2,[0x43c8c]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c8c, 4)

00043af0: str r6,[r5,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)

00043af4: str r10,[r5,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x30, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043af8: ldr r2,[r3,r2]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043afc: cpy r1,r6
	(register, 0x24, 4) COPY (register, 0x38, 4)

00043b00: str r2,[r5,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x3c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00043b04: cpy r0,r11
	(register, 0x20, 4) COPY (register, 0x4c, 4)

00043b08: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43b0c, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043b0c: cpy r0,r11
	(register, 0x20, 4) COPY (register, 0x4c, 4)

00043b10: cpy r7,r1
	(register, 0x3c, 4) COPY (register, 0x24, 4)

00043b14: ldr r1,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043b18: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43b1c, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043b1c: add r2,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043b20: cpy r8,r6
	(register, 0x40, 4) COPY (register, 0x38, 4)

00043b24: ldr r3,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043b28: mov r1,r2, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b2c: b 0x000437bc
	 ---  BRANCH (ram, 0x437bc, 4)

00043b30: sub r4,r4,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)

00043b34: b 0x00043a7c
	 ---  BRANCH (ram, 0x43a7c, 4)

00043b38: mov r1,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) COPY (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b3c: mov r0,#0x10
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b40: str r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043b44: bl 0x00026a60
	(register, 0x58, 4) COPY (const, 0x43b48, 4)
	 ---  CALL (ram, 0x26a60, 4)

00043b48: subs r10,r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x48, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043b4c: beq 0x00043c50
	 ---  CBRANCH (ram, 0x43c50, 4) , (register, 0x61, 1)

00043b50: mov lr,#0x1f
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x58, 4) COPY (const, 0x1f, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b54: ldr r2,[0x43c90]
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c90, 4)

00043b58: ldr r0,[0x43c94]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c94, 4)

00043b5c: umull r1,r2,r11,r2
	(unique, 0x7ca00, 8) INT_ZEXT (register, 0x28, 4)
	(unique, 0x7cb00, 8) INT_ZEXT (register, 0x4c, 4)
	(unique, 0x7cc00, 8) INT_MULT (unique, 0x7ca00, 8) , (unique, 0x7cb00, 8)
	(register, 0x64, 1) INT_SLESS (unique, 0x7cc00, 8) , (const, 0x0, 8)
	(register, 0x65, 1) INT_EQUAL (unique, 0x7cc00, 8) , (const, 0x0, 8)
	(register, 0x24, 4) SUBPIECE (unique, 0x7cc00, 8) , (const, 0x0, 4)
	(register, 0x28, 4) SUBPIECE (unique, 0x7cc00, 8) , (const, 0x4, 4)

00043b60: umull r1,r0,r11,r0
	(unique, 0x7ca00, 8) INT_ZEXT (register, 0x20, 4)
	(unique, 0x7cb00, 8) INT_ZEXT (register, 0x4c, 4)
	(unique, 0x7cc00, 8) INT_MULT (unique, 0x7ca00, 8) , (unique, 0x7cb00, 8)
	(register, 0x64, 1) INT_SLESS (unique, 0x7cc00, 8) , (const, 0x0, 8)
	(register, 0x65, 1) INT_EQUAL (unique, 0x7cc00, 8) , (const, 0x0, 8)
	(register, 0x24, 4) SUBPIECE (unique, 0x7cc00, 8) , (const, 0x0, 4)
	(register, 0x20, 4) SUBPIECE (unique, 0x7cc00, 8) , (const, 0x4, 4)

00043b64: ldr r3,[sp,#0x44]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043b68: mov r2,r2, lsr #0x4
	(unique, 0x3800, 4) INT_SUB (const, 0x4, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x28, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b6c: ldr r12,[0x43c8c]
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c8c, 4)

00043b70: rsb r1,r2,r2, lsl #0x3
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x3, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x3, 4)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SBORROW (unique, 0x3580, 4) , (register, 0x28, 4)
	(register, 0x24, 4) INT_SUB (unique, 0x3580, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043b74: str r10,[r5,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x30, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

00043b78: str lr,[r5,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x34, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)

00043b7c: add r2,r2,r1, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043b80: ldr r1,[r3,r12]
	(unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

00043b84: sub r2,r11,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_SUB (register, 0x4c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043b88: str r1,[r5,#0x3c]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x3c, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)

00043b8c: sub r1,r11,r0
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x20, 4)
	(register, 0x24, 4) INT_SUB (register, 0x4c, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

00043b90: add r0,r0,r1, lsr #0x1
	(unique, 0x3800, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3b00, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3b00, 4)
	(register, 0x20, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043b94: mov r7,r0, lsr #0x4
	(unique, 0x3800, 4) INT_SUB (const, 0x4, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043b98: add r2,r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

00043b9c: rsb r7,r7,r7, lsl #0x5
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x5, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x5, 4)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SBORROW (unique, 0x3580, 4) , (register, 0x3c, 4)
	(register, 0x3c, 4) INT_SUB (unique, 0x3580, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043ba0: cpy r8,lr
	(register, 0x40, 4) COPY (register, 0x58, 4)

00043ba4: ldr r3,[sp,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043ba8: sub r7,r11,r7
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x3c, 4)
	(register, 0x3c, 4) INT_SUB (register, 0x4c, 4) , (register, 0x3c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)

00043bac: mov r1,r2, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043bb0: b 0x000437bc
	 ---  BRANCH (ram, 0x437bc, 4)

00043bb4: cpy r0,r7
	(register, 0x20, 4) COPY (register, 0x3c, 4)

00043bb8: str r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

00043bbc: bl 0x0001ead0
	(register, 0x58, 4) COPY (const, 0x43bc0, 4)
	 ---  CALL (ram, 0x1ead0, 4)

00043bc0: ldr r2,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bc4: mov r1,r1, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x24, 4) COPY (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043bc8: b 0x0004397c
	 ---  BRANCH (ram, 0x4397c, 4)

00043bcc: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

00043bd0: ldr r6,[sp,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bd4: ldr r5,[sp,#0x98]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bd8: ldr r9,[sp,#0xa4]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bdc: ldr r8,[sp,#0x4c]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043be0: ldr r10,[sp,#0x50]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x50, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043be4: b 0x00043480
	 ---  BRANCH (ram, 0x43480, 4)

00043be8: ldrb r2,[r4,#0x1a8]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a8, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x43980, 1)

00043bec: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043bf0: bne 0x0004380c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x4380c, 4) , (unique, 0x1a80, 1)

00043bf4: ldr r2,[sp,#0x28]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bf8: ldr r2,[r2,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043bfc: tst r2,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

00043c00: bne 0x00043c30
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x43c30, 4) , (unique, 0x1a80, 1)

00043c04: mov r2,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

00043c08: strb r2,[r4,#0x1a8]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1a8, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x70d00, 1)

00043c0c: b 0x0004380c
	 ---  BRANCH (ram, 0x4380c, 4)

00043c10: ldr r0,[0x43c98]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c98, 4)

00043c14: ldr r2,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c18: ldr r1,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c1c: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x43c1c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043c20: str r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043c24: bl 0x000455a8
	(register, 0x58, 4) COPY (const, 0x43c28, 4)
	 ---  CALL (ram, 0x455a8, 4)

00043c28: ldr r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c2c: b 0x000438b8
	 ---  BRANCH (ram, 0x438b8, 4)

00043c30: ldr r0,[0x43c9c]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43c9c, 4)

00043c34: ldr r2,[r4,#0x18]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c38: ldr r1,[r4,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c3c: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x43c3c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043c40: str r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

00043c44: bl 0x000455a8
	(register, 0x58, 4) COPY (const, 0x43c48, 4)
	 ---  CALL (ram, 0x455a8, 4)

00043c48: ldr r3,[sp,#0x24]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c4c: b 0x00043c04
	 ---  BRANCH (ram, 0x43c04, 4)

00043c50: ldr r0,[sp,#0x40]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

00043c54: bl 0x0003b9f0
	(register, 0x58, 4) COPY (const, 0x43c58, 4)
	 ---  CALL (ram, 0x3b9f0, 4)

00043c58: ldr r0,[0x43ca0]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x43ca0, 4)

00043c5c: add r0,pc,r0
	(unique, 0x1780, 4) INT_ADD (const, 0x43c5c, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)

00043c60: bl 0x000456c0
	(register, 0x58, 4) COPY (const, 0x43c64, 4)
	 ---  CALL (ram, 0x456c0, 4)

