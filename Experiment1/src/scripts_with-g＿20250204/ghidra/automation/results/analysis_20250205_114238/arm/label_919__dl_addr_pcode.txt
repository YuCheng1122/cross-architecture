Label: 919
Function: _dl_addr
Architecture: arm
Source File: Unknown
Entry Point: 0006d6c8

P-code:

0006d6c8: stmdb sp!,{r4,r5,r6,r7,r8,r9,r10,r11,lr}
	(register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
	(register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006d6cc: cpy r7,r0
	(register, 0x3c, 4) COPY (register, 0x20, 4)

0006d6d0: ldr r6,[0x6da4c]
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da4c, 4)

0006d6d4: ldr r0,[0x6da50]
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da50, 4)

0006d6d8: add r6,pc,r6
	(unique, 0x1780, 4) INT_ADD (const, 0x6d6d8, 4) , (const, 0x8, 4)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x38, 4)
	(register, 0x38, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

0006d6dc: ldr r0,[r6,r0]
	(unique, 0x8480, 4) INT_ADD (register, 0x38, 4) , (register, 0x20, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0006d6e0: sub sp,sp,#0x1c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1c, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0006d6e4: cpy r4,r3
	(register, 0x30, 4) COPY (register, 0x2c, 4)

0006d6e8: cpy r5,r1
	(register, 0x34, 4) COPY (register, 0x24, 4)

0006d6ec: cpy r9,r2
	(register, 0x44, 4) COPY (register, 0x28, 4)

0006d6f0: str r0,[sp,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006d6f4: bl 0x0003aec4
	(register, 0x58, 4) COPY (const, 0x6d6f8, 4)
	 ---  CALL (ram, 0x3aec4, 4)

0006d6f8: cpy r0,r7
	(register, 0x20, 4) COPY (register, 0x3c, 4)

0006d6fc: bl 0x00068664
	(register, 0x58, 4) COPY (const, 0x6d700, 4)
	 ---  CALL (ram, 0x68664, 4)

0006d700: subs lr,r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x58, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d704: cpyeq r4,lr
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d708, 4) , (unique, 0x2680, 1)
	(register, 0x30, 4) COPY (register, 0x58, 4)

0006d708: beq 0x0006d8a0
	 ---  CBRANCH (ram, 0x6d8a0, 4) , (register, 0x61, 1)

0006d70c: ldr r3,[lr,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d710: ldr r2,[lr,#0x1c4]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x1c4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d714: str r3,[r5,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006d718: str r2,[r5,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006d71c: ldrb r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0006d720: cmp r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d724: beq 0x0006da1c
	 ---  CBRANCH (ram, 0x6da1c, 4) , (register, 0x61, 1)

0006d728: ldrb r3,[lr,#0x1a6]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x1a6, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0006d72c: ldr r2,[lr,#0x38]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x38, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d730: ands r3,r3,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d734: ldr r6,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d738: ldrne r10,[lr,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6d73c, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d73c: ldr r0,[lr,#0x15c]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x15c, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d740: cpyeq r10,r3
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d744, 4) , (unique, 0x2680, 1)
	(register, 0x48, 4) COPY (register, 0x2c, 4)

0006d744: ldr r3,[lr,#0x48]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x48, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d748: addne r6,r6,r10
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6d74c, 4) , (unique, 0x2680, 1)
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x48, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x48, 4)
	(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (register, 0x48, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)

0006d74c: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d750: ldr r11,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d754: cpy r3,r6
	(register, 0x2c, 4) COPY (register, 0x38, 4)

0006d758: beq 0x0006d8b4
	 ---  CBRANCH (ram, 0x6d8b4, 4) , (register, 0x61, 1)

0006d75c: ldr r1,[lr,#0x188]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x188, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d760: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d764: beq 0x0006d99c
	 ---  CBRANCH (ram, 0x6d99c, 4) , (register, 0x61, 1)

0006d768: ldr r12,[lr,#0x198]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x198, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d76c: str r4,[sp,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)

0006d770: add r1,r12,r1, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x24, 4) INT_ADD (register, 0x50, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d774: mov r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x20, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d778: cpy r4,r11
	(register, 0x30, 4) COPY (register, 0x4c, 4)

0006d77c: ldr r8,[0x6da54]
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da54, 4)

0006d780: sub r12,r12,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006d784: sub r1,r1,#0x4
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x4, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d788: str r10,[sp,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

0006d78c: b 0x0006d798
	 ---  BRANCH (ram, 0x6d798, 4)

0006d790: cmp r1,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d794: beq 0x0006d844
	 ---  CBRANCH (ram, 0x6d844, 4) , (register, 0x61, 1)

0006d798: ldr r2,[r12,#0x4]!
	(register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)

0006d79c: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7a0: beq 0x0006d790
	 ---  CBRANCH (ram, 0x6d790, 4) , (register, 0x61, 1)

0006d7a4: ldr r10,[lr,#0x19c]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x19c, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d7a8: stmib sp,{r1,r12}
	(register, 0x80, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x50, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006d7ac: add r2,r10,r2, lsl #0x2
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x48, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006d7b0: b 0x0006d80c
	 ---  BRANCH (ram, 0x6d80c, 4)

0006d7b4: ldr r12,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d7b8: cmp r12,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7bc: beq 0x0006d800
	 ---  CBRANCH (ram, 0x6d800, 4) , (register, 0x61, 1)

0006d7c0: ldrb r12,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x50, 4) INT_ZEXT (unique, 0x43980, 1)

0006d7c4: and r12,r12,#0xf
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0xf, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006d7c8: cmp r12,#0x6
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x6, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x6, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x50, 4) , (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7cc: beq 0x0006d800
	 ---  CBRANCH (ram, 0x6d800, 4) , (register, 0x61, 1)

0006d7d0: ldr r11,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d7d4: ldr r12,[lr,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d7d8: add r12,r11,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x4c, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x4c, 4) , (register, 0x50, 4)
	(register, 0x50, 4) INT_ADD (register, 0x4c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006d7dc: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7e0: bcc 0x0006d800
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x6d800, 4) , (unique, 0x1b80, 1)

0006d7e4: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7e8: beq 0x0006d960
	 ---  CBRANCH (ram, 0x6d960, 4) , (register, 0x61, 1)

0006d7ec: ldr r1,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d7f0: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7f4: bne 0x0006d96c
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d96c, 4) , (unique, 0x1a80, 1)

0006d7f8: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d7fc: beq 0x0006d978
	 ---  CBRANCH (ram, 0x6d978, 4) , (register, 0x61, 1)

0006d800: ldr r3,[r2],#0x4
	(unique, 0x8800, 4) COPY (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

0006d804: tst r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d808: bne 0x0006d838
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d838, 4) , (unique, 0x1a80, 1)

0006d80c: sub r3,r2,r10
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x48, 4)
	(register, 0x2c, 4) INT_SUB (register, 0x28, 4) , (register, 0x48, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006d810: mov r3,r3, asr #0x2
	(unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
	(unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
	(unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
	(unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x2, 4)
	(register, 0x2c, 4) COPY (unique, 0x4100, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d814: add r3,r6,r3, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006d818: ldrh r1,[r3,#0xe]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xe, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x24, 4) INT_ZEXT (unique, 0x44100, 2)

0006d81c: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d820: beq 0x0006d7b4
	 ---  CBRANCH (ram, 0x6d7b4, 4) , (register, 0x61, 1)

0006d824: cmp r1,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x40, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x24, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d828: bne 0x0006d7c0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d7c0, 4) , (unique, 0x1a80, 1)

0006d82c: ldr r3,[r2],#0x4
	(unique, 0x8800, 4) COPY (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

0006d830: tst r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d834: beq 0x0006d80c
	 ---  CBRANCH (ram, 0x6d80c, 4) , (register, 0x61, 1)

0006d838: ldmib sp,{r1,r12}
	(register, 0x80, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)

0006d83c: cmp r1,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d840: bne 0x0006d798
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d798, 4) , (unique, 0x1a80, 1)

0006d844: ldr r10,[sp,#0x10]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d848: ldr r4,[sp,#0x14]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d84c: ldr r3,[lr,#0x34]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x34, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d850: cmp r9,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d854: ldr r3,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d858: strne lr,[r9,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6d85c, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)

0006d85c: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d860: strne r0,[r4,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6d864, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)

0006d864: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d868: beq 0x0006d9b8
	 ---  CBRANCH (ram, 0x6d9b8, 4) , (register, 0x61, 1)

0006d86c: add r10,r10,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

0006d870: ldr r3,[r0,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d874: ldrh r2,[r0,#0xe]
	(unique, 0x9180, 4) INT_ADD (register, 0x20, 4) , (const, 0xe, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x28, 4) INT_ZEXT (unique, 0x44100, 2)

0006d878: add r10,r10,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x48, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)

0006d87c: ldr r3,[0x6da54]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da54, 4)

0006d880: str r10,[r5,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)

0006d884: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d888: moveq r3,#0x0
	(unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d88c, 4) , (unique, 0x2680, 1)
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d88c: ldrne r3,[lr,#0x0]
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
	 ---  CBRANCH (ram, 0x6d890, 4) , (unique, 0x2680, 1)
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d890: ldr r2,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d894: add r3,r3,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006d898: mov r4,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x30, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d89c: str r3,[r5,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0xc, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006d8a0: ldr r0,[sp,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d8a4: bl 0x0003b9f0
	(register, 0x58, 4) COPY (const, 0x6d8a8, 4)
	 ---  CALL (ram, 0x3b9f0, 4)

0006d8a8: cpy r0,r4
	(register, 0x20, 4) COPY (register, 0x30, 4)

0006d8ac: add sp,sp,#0x1c
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0006d8b0: ldmia sp!,{r4,r5,r6,r7,r8,r9,r10,r11,pc}
	(register, 0x80, 4) COPY (register, 0x54, 4)
	(register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
	(register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
	(register, 0x54, 4) COPY (register, 0x80, 4)
	(unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

0006d8b4: ldr r2,[lr,#0x30]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x30, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d8b8: cmp r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d8bc: beq 0x0006d99c
	 ---  CBRANCH (ram, 0x6d99c, 4) , (register, 0x61, 1)

0006d8c0: ldr r2,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d8c4: add r2,r10,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x28, 4)
	(register, 0x28, 4) INT_ADD (register, 0x48, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006d8c8: ldr r2,[r2,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d8cc: add r2,r6,r2, lsl #0x4
	(unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
	(unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
	(unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
	(unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x4, 4)
	(register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x28, 4) INT_ADD (register, 0x38, 4) , (unique, 0x3580, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)

0006d8d0: cmp r6,r2
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x38, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x28, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x38, 4) , (register, 0x28, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d8d4: bcs 0x0006d99c
	 ---  CBRANCH (ram, 0x6d99c, 4) , (register, 0x62, 1)

0006d8d8: ldr r6,[0x6da54]
	(register, 0x38, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da54, 4)

0006d8dc: b 0x0006d8ec
	 ---  BRANCH (ram, 0x6d8ec, 4)

0006d8e0: add r3,r3,#0x10
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)

0006d8e4: cmp r2,r3
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d8e8: bls 0x0006d84c
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d84c, 4) , (unique, 0x2080, 1)

0006d8ec: ldrb r12,[r3,#0xc]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x50, 4) INT_ZEXT (unique, 0x43980, 1)

0006d8f0: mov r1,r12, lsr #0x4
	(unique, 0x3800, 4) INT_SUB (const, 0x4, 4) , (const, 0x1, 4)
	(unique, 0x3880, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3800, 4)
	(unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
	(register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
	(unique, 0x3b00, 4) INT_RIGHT (register, 0x50, 4) , (const, 0x4, 4)
	(register, 0x24, 4) COPY (unique, 0x3b00, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d8f4: sub r1,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d8f8: cmp r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d8fc: bhi 0x0006d8e0
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (unique, 0x1f00, 1)

0006d900: ldrb r1,[r3,#0xd]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xd, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x24, 4) INT_ZEXT (unique, 0x43980, 1)

0006d904: and r1,r1,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x24, 4) INT_AND (register, 0x24, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d908: sub r1,r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d90c: cmp r1,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d910: bls 0x0006d8e0
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (unique, 0x2080, 1)

0006d914: and r12,r12,#0xf
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xf, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0xf, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)

0006d918: cmp r12,#0x6
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x6, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x6, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x50, 4) , (const, 0x6, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d91c: beq 0x0006d8e0
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (register, 0x61, 1)

0006d920: ldrh r1,[r3,#0xe]
	(unique, 0x9180, 4) INT_ADD (register, 0x2c, 4) , (const, 0xe, 4)
	(unique, 0x44100, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
	(register, 0x24, 4) INT_ZEXT (unique, 0x44100, 2)

0006d924: cmp r1,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d928: bne 0x0006d9c8
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d9c8, 4) , (unique, 0x1a80, 1)

0006d92c: ldr r12,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d930: cmp r12,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d934: beq 0x0006d8e0
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (register, 0x61, 1)

0006d938: ldr r1,[lr,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d93c: add r1,r12,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d940: cmp r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d944: bcc 0x0006d8e0
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (unique, 0x1b80, 1)

0006d948: beq 0x0006d9f8
	 ---  CBRANCH (ram, 0x6d9f8, 4) , (register, 0x61, 1)

0006d94c: ldr r8,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d950: add r1,r1,r8
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x40, 4)
	(register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x40, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d954: cmp r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d958: bcc 0x0006d9f8
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x6d9f8, 4) , (unique, 0x1b80, 1)

0006d95c: b 0x0006d8e0
	 ---  BRANCH (ram, 0x6d8e0, 4)

0006d960: cmp r7,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d964: beq 0x0006d978
	 ---  CBRANCH (ram, 0x6d978, 4) , (register, 0x61, 1)

0006d968: ldr r1,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d96c: add r1,r12,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d970: cmp r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d974: bcs 0x0006d800
	 ---  CBRANCH (ram, 0x6d800, 4) , (register, 0x62, 1)

0006d978: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d97c: beq 0x0006d98c
	 ---  CBRANCH (ram, 0x6d98c, 4) , (register, 0x61, 1)

0006d980: ldr r1,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d984: cmp r11,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x4c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d988: bls 0x0006d800
	(unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
	(unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d800, 4) , (unique, 0x2080, 1)

0006d98c: ldr r1,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d990: cmp r4,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x30, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d994: cpyhi r0,r3
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
	 ---  CBRANCH (ram, 0x6d998, 4) , (unique, 0x2680, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0006d998: b 0x0006d800
	 ---  BRANCH (ram, 0x6d800, 4)

0006d99c: cmp r9,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9a0: beq 0x0006da40
	 ---  CBRANCH (ram, 0x6da40, 4) , (register, 0x61, 1)

0006d9a4: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9a8: str lr,[r9,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)

0006d9ac: beq 0x0006d9b8
	 ---  CBRANCH (ram, 0x6d9b8, 4) , (register, 0x61, 1)

0006d9b0: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d9b4: str r3,[r4,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006d9b8: mov r2,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x28, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0006d9bc: cpy r3,r2
	(register, 0x2c, 4) COPY (register, 0x28, 4)

0006d9c0: str r2,[r5,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)

0006d9c4: b 0x0006d898
	 ---  BRANCH (ram, 0x6d898, 4)

0006d9c8: cmp r1,r6
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x38, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x24, 4) , (register, 0x38, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9cc: beq 0x0006d8e0
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (register, 0x61, 1)

0006d9d0: ldr r12,[r3,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
	(register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d9d4: ldr r1,[lr,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d9d8: add r1,r12,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x24, 4) INT_ADD (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)

0006d9dc: cmp r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9e0: bcc 0x0006d8e0
	(unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (unique, 0x1b80, 1)

0006d9e4: ldr r8,[r3,#0x8]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x8, 4)
	(register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006d9e8: cmp r8,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9ec: bne 0x0006d950
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d950, 4) , (unique, 0x1a80, 1)

0006d9f0: cmp r7,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x3c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x3c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9f4: bne 0x0006d8e0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (unique, 0x1a80, 1)

0006d9f8: cmp r0,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006d9fc: beq 0x0006da0c
	 ---  CBRANCH (ram, 0x6da0c, 4) , (register, 0x61, 1)

0006da00: ldr r1,[r0,#0x4]
	(unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006da04: cmp r1,r12
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006da08: bcs 0x0006d8e0
	 ---  CBRANCH (ram, 0x6d8e0, 4) , (register, 0x62, 1)

0006da0c: ldr r1,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006da10: cmp r11,r1
	(register, 0x68, 1) COPY (register, 0x62, 1)
	(register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x4c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x24, 4)
	(unique, 0x42a00, 4) INT_SUB (register, 0x4c, 4) , (register, 0x24, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42a00, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006da14: cpyhi r0,r3
	(unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
	(unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
	(unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
	 ---  CBRANCH (ram, 0x6da18, 4) , (unique, 0x2680, 1)
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0006da18: b 0x0006d8e0
	 ---  BRANCH (ram, 0x6d8e0, 4)

0006da1c: ldrb r3,[lr,#0x1a4]
	(unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x1a4, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0006da20: tst r3,#0x3
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(unique, 0x74000, 4) INT_AND (register, 0x2c, 4) , (const, 0x3, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)
	(register, 0x64, 1) INT_SLESS (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x74000, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006da24: bne 0x0006d728
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d728, 4) , (unique, 0x1a80, 1)

0006da28: ldr r3,[0x6da58]
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x6da58, 4)

0006da2c: ldr r3,[r6,r3]
	(unique, 0x8480, 4) INT_ADD (register, 0x38, 4) , (register, 0x2c, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)

0006da30: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006da34: ldr r3,[r3,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)

0006da38: str r3,[r5,#0x0]
	(unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)

0006da3c: b 0x0006d728
	 ---  BRANCH (ram, 0x6d728, 4)

0006da40: cmp r4,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0006da44: bne 0x0006d9b0
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x6d9b0, 4) , (unique, 0x1a80, 1)

0006da48: b 0x0006d9b8
	 ---  BRANCH (ram, 0x6d9b8, 4)

