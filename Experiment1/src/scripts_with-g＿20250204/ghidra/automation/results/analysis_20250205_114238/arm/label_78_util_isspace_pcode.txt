Label: 78
Function: util_isspace
Architecture: arm
Source File: Unknown
Entry Point: 0001e980

P-code:

0001e980: str r11,[sp,#-0x4]!
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
	 ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x4c, 4)

0001e984: add r11,sp,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)

0001e988: sub sp,sp,#0xc
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x54, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0xc, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0001e98c: cpy r3,r0
	(register, 0x2c, 4) COPY (register, 0x20, 4)

0001e990: strb r3,[r11,#-0x5]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffffb, 4)
	(unique, 0x70d00, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
	 ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (unique, 0x70d00, 1)

0001e994: ldrb r3,[r11,#-0x5]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffffb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0001e998: cmp r3,#0x20
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x20, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x20, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x20, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e99c: beq 0x0001e9c4
	 ---  CBRANCH (ram, 0x1e9c4, 4) , (register, 0x61, 1)

0001e9a0: ldrb r3,[r11,#-0x5]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffffb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0001e9a4: cmp r3,#0x9
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x9, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0x9, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x9, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0x9, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e9a8: beq 0x0001e9c4
	 ---  CBRANCH (ram, 0x1e9c4, 4) , (register, 0x61, 1)

0001e9ac: ldrb r3,[r11,#-0x5]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffffb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0001e9b0: cmp r3,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xa, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e9b4: beq 0x0001e9c4
	 ---  CBRANCH (ram, 0x1e9c4, 4) , (register, 0x61, 1)

0001e9b8: ldrb r3,[r11,#-0x5]
	(unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xfffffffb, 4)
	(unique, 0x43980, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
	(register, 0x2c, 4) INT_ZEXT (unique, 0x43980, 1)

0001e9bc: cmp r3,#0xa
	(unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_LESSEQUAL (const, 0xa, 4) , (register, 0x2c, 4)
	(register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0xa, 4)
	(unique, 0x42900, 4) INT_SUB (register, 0x2c, 4) , (const, 0xa, 4)
	(register, 0x64, 1) INT_SLESS (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (unique, 0x42900, 4) , (const, 0x0, 4)
	(register, 0x62, 1) COPY (register, 0x66, 1)
	(register, 0x61, 1) COPY (register, 0x65, 1)
	(register, 0x60, 1) COPY (register, 0x64, 1)
	(register, 0x63, 1) COPY (register, 0x67, 1)

0001e9c0: bne 0x0001e9cc
	(unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
	 ---  CBRANCH (ram, 0x1e9cc, 4) , (unique, 0x1a80, 1)

0001e9c4: mov r3,#0x1
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x1, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001e9c8: b 0x0001e9d0
	 ---  BRANCH (ram, 0x1e9d0, 4)

0001e9cc: mov r3,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x2c, 4) COPY (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
	(register, 0x66, 1) COPY (register, 0x68, 1)
	(register, 0x67, 1) COPY (register, 0x63, 1)

0001e9d0: cpy r0,r3
	(register, 0x20, 4) COPY (register, 0x2c, 4)

0001e9d4: add sp,r11,#0x0
	(unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
	(unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
	(unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
	(unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
	(unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
	(register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
	(register, 0x66, 1) INT_CARRY (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x67, 1) INT_SCARRY (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x54, 4) INT_ADD (register, 0x4c, 4) , (const, 0x0, 4)
	(register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
	(register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)

0001e9d8: ldr r11,[sp],#0x4
	(unique, 0x8800, 4) COPY (register, 0x54, 4)
	(register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
	(register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)

0001e9dc: bx lr
	(unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
	(register, 0x78, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
	(register, 0x69, 1) COPY (register, 0x78, 1)
	(register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
	 ---  RETURN (register, 0x5c, 4)

